<?xml version="1.0"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/">

<channel>
	<title>Planet Python</title>
	<link>http://planetpython.org/</link>
	<language>en</language>
	<description>Planet Python - http://planetpython.org/</description>

<item>
	<title>Codementor: Writing Unit Tests for REST APIs in Python</title>
	<guid>https://www.codementor.io/parthshandilya/writing-unit-tests-for-rest-apis-in-python-ge8wmbofg</guid>
	<link>https://www.codementor.io/parthshandilya/writing-unit-tests-for-rest-apis-in-python-ge8wmbofg</link>
	<description>Learn how to write unit tests for REST APIs using Python.</description>
	<pubDate>Wed, 14 Feb 2018 10:16:28 +0000</pubDate>
</item>
<item>
	<title>Python Sweetness: Much ado about latency: Mitogen and the BFG9000 of import hooks</title>
	<guid>http://pythonsweetness.tumblr.com/post/170846280192</guid>
	<link>http://pythonsweetness.tumblr.com/post/170846280192</link>
	<description>&lt;p&gt;After a long winter break from recreational programming, over the past days I
finally built up steam and broke a chunk of new ground on Mitogen, this time
growing its puny module forwarder into a bona fide beast, ready to handle
almost any network condition and user code thrown at it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://k3.botanicus.net/tmp/mitoblog2/bfg9000.jpg&quot; /&gt;&lt;em&gt;No adversary is a match for the BFG&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Recap&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://mitogen.readthedocs.io/en/latest/&quot;&gt;Mitogen is a library for executing parts of a Python program in a remote
context&lt;/a&gt;, primarily over &lt;code&gt;sudo&lt;/code&gt; and
SSH connections, and establishing bidirectional communication with those
parts. Targeting infrastructure applications, it requires no upfront
configuration of target machines, aside from an SSH daemon and Python 2.x
interpreter, which is the default for almost every Linux machine found on any
conceivable network.&lt;/p&gt;

&lt;p&gt;The target need not possess a writeable filesystem, code is loaded
dynamically on demand, and execution occurs entirely from RAM.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How Import Works&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To implement dynamic loading, child Python processes (“contexts”) have a
&lt;a href=&quot;https://www.python.org/dev/peps/pep-0302/&quot;&gt;PEP-302 import hook&lt;/a&gt; installed
that causes attempts to import modules unavailable locally to automatically be
served over the network connection to the parent process. For example, in a
script like:&lt;/p&gt;

&lt;pre&gt;
    import mitogen
    import requests

    def get_url(url):
        return requests.get(url).text

    @mitogen.main()
    def main(router):
        host = router.ssh(hostname='k3')
        print host.call(get_url, 'https://www.google.com/')
&lt;/pre&gt;



&lt;p&gt;If the &lt;code&gt;requests&lt;/code&gt; package is missing on the host &lt;code&gt;k3&lt;/code&gt;, it will automatically
be copied and imported in RAM, without requiring upfront configuration, or
causing or requiring writes to the remote filesystem.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://k3.botanicus.net/tmp/mitoblog2/kathmandu-paris.jpg&quot; width=&quot;308&quot; height=&quot;420&quot; /&gt;&lt;em&gt;Kathmandu to Paris via 3G: serious business&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So far, so good. Just one hitch&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;While the loader has served well over the library’s prototypical life (which
in real time, is approaching 12 years!), it has always placed severe limits on
the structure of the loaded code, as each additional source file introduced
one network round-trip to serve it.&lt;/p&gt;

&lt;p&gt;Given a relatively small dependency such as Kenneth Reitz&amp;rsquo; popular
&lt;a href=&quot;http://requests.readthedocs.io/en/master/&quot;&gt;Requests&lt;/a&gt; package, comprising 17
submodules, this means 17 additional network round-trips. While that may not
mean much over a typical local area network segment where roundtrips are
measured in microseconds, it quickly multiplies over even modest wide-area
networks, where infrastructure tooling is commonly deployed.&lt;/p&gt;

&lt;p&gt;For a library like Requests, 17 round-trips amounts to 340ms latency over a
reasonably local 20ms link, which is comfortably within the realms of
acceptable, however over common radio and international links of 200ms or
more, already this adds at least 3.4 seconds to the startup cost of any
Mitogen program, time wasted doing nothing but waiting on the network.&lt;/p&gt;

&lt;p&gt;Sadly, Requests is hardly even the biggest dependency Mitogen can expect to
encounter. For testing I chose
&lt;a href=&quot;https://docs.djangoproject.com/en/2.0/topics/db/models/&quot;&gt;django.db.models&lt;/a&gt; as
a representative baseline: heavily integrated with all of Django, it
transitively imports over 160 modules across numerous subpackages. That means
on an international link, over 30 seconds of startup latency spent on one
dependency.&lt;/p&gt;

&lt;p&gt;It is worth note that Django is not something I’d expect to see in a typical
Mitogen program, it’s simply an extraordinarily worst-case target worth
hitting. If Mitogen can handle &lt;code&gt;django.db.models&lt;/code&gt;, it should cope with pretty
much anything.&lt;/p&gt;

&lt;p&gt;Combining evils, over an admittedly better-than-average Nepali mobile data
network, &lt;em&gt;and&lt;/em&gt; an international link to my &lt;del&gt;IRC box&lt;/del&gt; mail server in Paris,
&lt;code&gt;django.db.models&lt;/code&gt; takes almost 60 seconds to load with the old design.&lt;/p&gt;

&lt;p&gt;In the real world, this one-file-per-roundtrip characteristic means the
current approach &lt;a href=&quot;http://pythonsweetness.tumblr.com/post/165366346547/mitogen-an-infrastructure-code-baseline-that&quot;&gt;sucks almost as much as
Ansible
does&lt;/a&gt;,
which calls into doubt my goal of implementing an Ansible-trumping Ansible
connection plug-in. Clearly something must give!&lt;/p&gt;

&lt;p&gt;&lt;br clear=&quot;all&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://k3.botanicus.net/tmp/mitoblog2/django-3g-kathmandu-paris-rtt-old.png&quot; alt=&quot;&quot; /&gt;&lt;em&gt;50.35 seconds and hundreds of roundtrips spent
    transferring &lt;code&gt;django.db.models&lt;/code&gt; from Kathmandu to Paris via 3G. Despite a
    fast link, throughput averages 13KiB/sec and never exceeds 45KiB/sec. Well
    over half of the 989 frames sent are wasted on signalling
    (Y=0)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;br clear=&quot;all&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Trying harder&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Over the years I discarded many approaches for handling this latency
nightmare:&lt;/p&gt;

&lt;ol&gt;&lt;li&gt;Having the user explicitly configure a module list to deliver upfront
to new contexts, which sucks and is plainly unmaintainable.&lt;/li&gt;
&lt;li&gt;Installing a PEP-302 hook in the master in order to observe the import
graph, which would be technically exciting, but likely to suck horribly due
to fragility and inevitable interference with real PEP-302 hooks, such as
&lt;a href=&quot;http://www.py2exe.org/&quot;&gt;py2exe&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Observing the import graph caused by a function call in a single context,
then using it to preload modules in additional contexts. This seems
workable, except the benefit would only be felt by multiple-child Mitogen
programs. Single child programs would continue to pay the latency tax.&lt;/li&gt;
&lt;li&gt;Variants of 2 and 3, except caching the result as intermediate state in the
master’s filesystem. Ignoring the fact &lt;strong&gt;persistent intermediate state is
always evil&lt;/strong&gt; (a topic for later!), that would require weird and imperfect
invalidation rules, which means performance would suck during development
and prototyping, and bugs are possible where state gets silently wedged
and previously working programs inexplicably slow down.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Finally last year I settled on using static analysis, and restricting
preloading at package boundaries. When a dependency is detected in a package
external to the one being requested, it is not preloaded until the child has
demonstrated, by requesting the top-level package module from its parent, that
the child lacks all of the submodules contained by it.&lt;/p&gt;

&lt;p&gt;This seems like a good rule: preloading can occur aggressively within a
package, but must otherwise wait for a child to signal a package as missing
before preemptively wasting time and bandwidth delivering code the child never
needed.&lt;/p&gt;

&lt;p&gt;As a final safeguard, preloading is restricted to only modules the master
itself loaded. It is not sufficient for an &lt;code&gt;import&lt;/code&gt; statement to exist:
surrounding conditional logic must have caused the module to be loaded by the
master. In this manner the semantics of platform, version-specific and lazy
imports are roughly preserved.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Syntax tree hell&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Quite predictably, after attempting to approach the problem with regexes, I
threw my hands up on realizing a single regex may not handle every possible
import statement:&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;&lt;code&gt;import a&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;import a as b&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;from a import b&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;from a import b as c&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;from a import (b, c, d)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;I gleefully thought I’d finally found a use for the
&lt;a href=&quot;https://docs.python.org/2/library/compiler.html&quot;&gt;compiler&lt;/a&gt; and
&lt;a href=&quot;https://docs.python.org/2/library/ast.html&quot;&gt;ast&lt;/a&gt; modules, and these were the
obvious alternative to avoiding the rats nest of multiple regexes. Not quite.
You see, across Python releases the grammar has changed, and in lock-step so
have the representations exported by the &lt;code&gt;compiler&lt;/code&gt; and &lt;code&gt;ast&lt;/code&gt; modules.&lt;/p&gt;

&lt;p&gt;Adding insult to injury: neither module is supported through every interesting
Python version. I have seen Python 2.4 deployed commercially as recently as
summer 2016, and therefore consider it mandatory for the kind of library I
want on my toolbelt. To support antique and chic Python alike, it was
necessary to implement both approaches and select one at runtime. Many might
see this is an opportunity to drop 2.4, but &lt;em&gt;“just upgrade lol”&lt;/em&gt; is never a
good answer while maintaining long shelf-life systems, and should never be a
a barrier to applying a trusted Swiss Army Knife.&lt;/p&gt;

&lt;p&gt;After some busy days last September, I had a working scanner built around
syntax trees, except for a tiny problem: &lt;strong&gt;it was ridiculously slow&lt;/strong&gt;. Parsing
the 8KiB &lt;code&gt;mitogen.core&lt;/code&gt; module took 12ms on my laptop, which multiplied up is
over a second of CPU burnt scanning dependencies for a package like Django. If
memory serves, reality was closer to 3 seconds: far exceeding the latency
saved while talking to a machine on a LAN.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sometimes hacking bytecode make perfect sense&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I couldn’t stop groaning the day I abandoned ASTs. As is often true when
following software industry &lt;em&gt;best practice&lt;/em&gt;, we are left holding a decomposing
trout that, while technically fulfilling its role, stinks horribly, costs all
involved a fortune to support and causes pains worse than those it was
intended to relieve. Still hoping to avoid regexes, I went digging for
precedent elsewhere in tools dealing with the same problem.&lt;/p&gt;

&lt;p&gt;That’s when I discovered the strange and unloved
&lt;a href=&quot;https://docs.python.org/2/library/modulefinder.html&quot;&gt;modulefinder&lt;/a&gt; buried in
the standard library, a forgotten relic from a bygone era, seductively
deposited there as a belated Christmas gift to all, on a gloomy &lt;a href=&quot;https://github.com/python/cpython/commit/41c554fbec1be5412aea2b388f0952657a2f07e7&quot;&gt;New Year’s
Eve 2002 by Guido’s own
brother&lt;/a&gt;.
Diving in, I was shocked and mesmerized to find dependencies synthesized by
recompiling each module and extracting
&lt;a href=&quot;https://docs.python.org/2/library/dis.html#opcode-IMPORT_FROM&quot;&gt;IMPORT_FROM&lt;/a&gt;
opcodes from the compiled bytecode. Reimplementing a variant, I was overjoyed
to discover &lt;code&gt;django.db.models&lt;/code&gt; transitive dependencies enumerated in under
350ms on my laptop. A workable solution!&lt;/p&gt;

&lt;p&gt;The solution has some further crazy results: &lt;code&gt;IMPORT_FROM&lt;/code&gt; has barely changed
since the Python 2.4 days, right through to Python 3.x. The same approach
works everywhere, including PyPy, which uses the same format, which makes this
&lt;strong&gt;more portable&lt;/strong&gt; than the &lt;code&gt;ast&lt;/code&gt; and &lt;code&gt;compiler&lt;/code&gt; modules!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Coping with concurrency&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now a mechanism exists to enumerate dependencies, we need a mode of delivery.
The approach used is simplistic, and (as seen later), will likely require
future improvement.&lt;/p&gt;

&lt;p&gt;On receiving a
&lt;a href=&quot;http://mitogen.readthedocs.io/en/latest/howitworks.html#mitogen.core.GET_MODULE&quot;&gt;GET_MODULE&lt;/a&gt;
message from a child, a parent (don’t forget, Mitogen operates recursively!)
first tries to satisfy the request from its own cache, before forwarding it
upwards towards the master. The master sends
&lt;a href=&quot;http://mitogen.readthedocs.io/en/latest/howitworks.html#mitogen.core.LOAD_MODULE&quot;&gt;LOAD_MODULE&lt;/a&gt;
messages for all dependencies known to be missing from the child before
sending a final message containing the module that was actually requested.
Since contexts always cache unsolicited &lt;code&gt;LOAD_MODULE&lt;/code&gt; messages from upstream,
by the time the message arrives for the requested module, many dependencies
should be in RAM and no further network roundtrips requesting them are required.&lt;/p&gt;

&lt;p&gt;Meanwhile for each stream connected to any parent, a set of module names ever
delivered on that stream are recorded. Each parent is allowed to ignore any
&lt;code&gt;GET_MODULE&lt;/code&gt; for which a corresponding &lt;code&gt;LOAD_MODULE&lt;/code&gt; has already been sent,
preventing a race between in-flight requests causing the same module to ever
be sent twice.&lt;/p&gt;

&lt;p&gt;This places the onus on downstream contexts to ensure the single &lt;code&gt;LOAD_MODULE&lt;/code&gt;
message received for each distinct module always reaches every interested
party. In short, &lt;code&gt;GET_MODULE&lt;/code&gt; messages must be deduplicated and synchronized
not only for any arriving from a context’s children, but also from its own
threads.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://mitogen.readthedocs.io/en/latest/howitworks.html#concurrency&quot;&gt;Some further gory details are in the docs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pretty pictures&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;And finally the result. For my test script, the total number of roundtrips
dropped from 166 to 13, one of which is for the script itself, and 3 negative
requests for extension modules that cannot be transferred. That leaves, bugs
aside, &lt;strong&gt;9 roundtrips&lt;/strong&gt; to transfer the most obscene dependency I could think
of.&lt;/p&gt;

&lt;p&gt;One more look at the library’s network profile. Over the same connection as
previously, the situation has improved immensely:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://k3.botanicus.net/tmp/mitoblog2/django-3g-kathmandu-paris-rtt.png&quot; alt=&quot;&quot; /&gt;&lt;em&gt;570 packets sending Django 7,231km over 3G in 16.47
    seconds. Throughput averages 38.6KiB/sec and peaks at
    2.7MiB/sec&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Not only is performance up, but the number of frames transmitted has dropped
by 42%. That’s a 42% drop in the likelihood of connection hang due to crappy
WiFi! However since packet loss is usually temporal, it is probably an
underestimate as the transaction also completes 3 times faster.&lt;/p&gt;

&lt;p&gt;One final detail is clearly visible: around the 10 second mark, a tall column
of frames is sent with progressively increasing size, almost in the same
instant. This is not some bug, it is &lt;a href=&quot;https://en.wikipedia.org/wiki/Path_MTU_Discovery&quot;&gt;Path MTU
Discovery&lt;/a&gt; (PMTUD) in
action. PMTUD is a mechanism by which IP subprotocols can learn the maximum
frame size tolerated by the path between communicating peers, which in turn
maximizes link efficiency by minimizing bandwidth wasted on headers. The size
is ramped up until either loss occurs or an intermediary signals error via
&lt;a href=&quot;https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol#Destination_unreachable&quot;&gt;ICMP&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Just like the network path, PMTUD is dynamic and must restart on any signal
indicating network conditions have changed. Comparing this graph with the
previous, we see one final improvement as a result of providing the network
layer enough data to do its job: PMTUD appears restart much less frequently,
and the stream is pegged at the true path MTU for much longer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Futures&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Aside from simple fixes to reduce wasted roundtrips for extension modules that
can’t be imported, and optional imports of top-level packages that don’t exist
on the master, there are two major niggles remaining in how import works
today.&lt;/p&gt;

&lt;p&gt;The first is an irritating source of latency present in deep trees: currently
it is impossible for intermediary nodes satisfying
&lt;a href=&quot;http://mitogen.readthedocs.io/en/latest/howitworks.html#mitogen.core.GET_MODULE&quot;&gt;GET_MODULE&lt;/a&gt;
requests for children to streamily send preloaded modules towards a child
until the final
&lt;a href=&quot;http://mitogen.readthedocs.io/en/latest/howitworks.html#mitogen.core.LOAD_MODULE&quot;&gt;LOAD_MODULE&lt;/a&gt;
arrives at the intermediary for the module actually requested by the child.
That means preloading is artificially serialized at each layer in the tree,
when a better design would allow it to progress concurrent to the
&lt;code&gt;LOAD_MODULE&lt;/code&gt; messages still in-flight from the master.&lt;/p&gt;

&lt;p&gt;This will present itself when doing multi-machine hops where links between the
machines are slow or suffer high latency. It will also be important to fix
before handling hundreds to thousands of children, such as should become
practical once asynchronous connect() is implemented.&lt;/p&gt;

&lt;p&gt;There are various approaches to tweaking the design so that concurrency is
restored, but I would like to let the paint dry a little on the new
implementation before destablizing it again.&lt;/p&gt;

&lt;p&gt;The second major issue is almost certainly a bug waiting to be discovered, but
I’m out of energy to attack it right now. It relates to complex situations
where many children have different functions invoked in them, from a complex
set of overlapping packages. In such cases, it is possible that a
&lt;code&gt;LOAD_MODULE&lt;/code&gt; for an unrelated &lt;code&gt;GET_MODULE&lt;/code&gt; prematurely delivers the final
module from another import, before it has had all requisite modules preloaded
into the child.&lt;/p&gt;

&lt;p&gt;To fix that, the library must ensure the tree of dependencies for all module
requests are sent downstream depth-first, i.e. it is never possible for any
module to appear in a &lt;code&gt;LOAD_MODULE&lt;/code&gt; before all of its dependencies have first.
I’m not sure if this is true right now.&lt;/p&gt;

&lt;p&gt;Finally there are latency sources buried elsewhere in the library, including
at least 2 needless roundtrips during connection setup. Fighting latency is an
endless war, but with module loading working efficiently, the most important
battle is over.&lt;/p&gt;


 .caption img {
    margin: 0 !important;
 }
figure: {
  padding: 4px;
  padding-bottom: 12px;
}</description>
	<pubDate>Tue, 13 Feb 2018 21:35:32 +0000</pubDate>
</item>
<item>
	<title>NumFOCUS: Cantera Joins NumFOCUS Sponsored Projects</title>
	<guid>https://www.numfocus.org/blog/cantera-joins-numfocus-sponsored-projects/</guid>
	<link>https://www.numfocus.org/blog/cantera-joins-numfocus-sponsored-projects/</link>
	<description>&lt;p&gt;The post &lt;a rel=&quot;nofollow&quot; href=&quot;https://www.numfocus.org/blog/cantera-joins-numfocus-sponsored-projects/&quot;&gt;Cantera Joins NumFOCUS Sponsored Projects&lt;/a&gt; appeared first on &lt;a rel=&quot;nofollow&quot; href=&quot;https://www.numfocus.org&quot;&gt;NumFOCUS&lt;/a&gt;.&lt;/p&gt;</description>
	<pubDate>Tue, 13 Feb 2018 20:48:59 +0000</pubDate>
</item>
<item>
	<title>Philip Semanchuk: A Python 2 to 3 Migration Guide</title>
	<guid>http://blog.pyspoken.com/2018/02/13/python-2-to-3-migration-guide/</guid>
	<link>http://blog.pyspoken.com/2018/02/13/python-2-to-3-migration-guide/</link>
	<description>&lt;p&gt;It&amp;#8217;s not always obvious, but &lt;strong&gt;migrating from Python 2 to 3 doesn&amp;#8217;t have to be an overwhelming effort spike&lt;/strong&gt;. I&amp;#8217;ve done Python 2-to-3 migration assessments with several organizations, and in each case we were able to &lt;strong&gt;turn the unknowns into a set of straightforward to-do lists&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I&amp;#8217;ve written &lt;a href=&quot;http://blog.pyspoken.com/wp-content/uploads/2018/02/python2_to_3_migration_guide.pdf&quot;&gt;a Python 2-to-3 migration guide [PDF]&lt;/a&gt;&lt;/strong&gt; to help others who want to make the leap but aren&amp;#8217;t sure where to start, or have maybe already begun but would like another perspective. It outlines some high level steps for the migration and also contains some nitty-gritty technical details, so &lt;strong&gt;it&amp;#8217;s useful for both those who will plan the migration and the technical staff that will actually perform it&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The (very brief) summary&lt;/strong&gt; is that most of the work can be done in advance without sacrificing Python 2 compatibility. What&amp;#8217;s more, you can divide the work into manageable chunks that you can tick off one by one as you have time to work on them. Last but not least, many of the changes are routine and mechanical (for example, changing the &lt;code&gt;print&lt;/code&gt; statement to a function), and there are tools that do a lot of the work for you.&lt;/p&gt;
&lt;p&gt;You can &lt;a href=&quot;http://blog.pyspoken.com/wp-content/uploads/2018/02/python2_to_3_migration_guide.pdf&quot;&gt;download the migration guide here [PDF]&lt;/a&gt;. Please &lt;strong&gt;feel free to share&lt;/strong&gt;; it&amp;#8217;s licensed under a Creative Commons Attribution-ShareAlike license.&lt;/p&gt;
&lt;p&gt;Feedback is welcome, either via &lt;a href=&quot;mailto:philip@pyspoken.com&quot;&gt;email&lt;/a&gt; or in the comments below.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;</description>
	<pubDate>Tue, 13 Feb 2018 19:58:31 +0000</pubDate>
</item>
<item>
	<title>Mike Driscoll: ReportLab Book Chapter Sampler</title>
	<guid>http://www.blog.pythonlibrary.org/2018/02/13/reportlab-book-chapter-sampler/</guid>
	<link>http://www.blog.pythonlibrary.org/2018/02/13/reportlab-book-chapter-sampler/</link>
	<description>&lt;div class=&quot;pf-content&quot;&gt;&lt;p&gt;I thought it would be fun to create a sample of the book so you can get an idea of what the book will be like. So I created a PDF that contains the first 3 chapters of the book for you.&lt;/p&gt;
&lt;h1 id=&quot;h:download-sample&quot;&gt;&lt;a href=&quot;https://www.dropbox.com/s/1yeg544fgwu23hi/reportlab-preview-ch-1-3.pdf?dl=0&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Download Sample&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Note that the format of this sample is not quite right as I had to generate it from a more complete version, so the PDF&amp;#8217;s table of contents shows more than what is actually in the document.&lt;/p&gt;
&lt;p&gt;Also I just broke through the 100 page boundary over the weekend. I am finishing up chapter 5 and will be cranking out another couple of chapters this week if all goes well.&lt;/p&gt;
&lt;p&gt;Thanks for your support!&lt;br /&gt;
Mike&lt;/p&gt;
&lt;/div&gt;&lt;p&gt;&lt;a class=&quot;a2a_button_facebook&quot; href=&quot;https://www.addtoany.com/add_to/facebook?linkurl=http%3A%2F%2Fwww.blog.pythonlibrary.org%2F2018%2F02%2F13%2Freportlab-book-chapter-sampler%2F&amp;linkname=ReportLab%20Book%20Chapter%20Sampler&quot; title=&quot;Facebook&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;&lt;a class=&quot;a2a_button_twitter&quot; href=&quot;https://www.addtoany.com/add_to/twitter?linkurl=http%3A%2F%2Fwww.blog.pythonlibrary.org%2F2018%2F02%2F13%2Freportlab-book-chapter-sampler%2F&amp;linkname=ReportLab%20Book%20Chapter%20Sampler&quot; title=&quot;Twitter&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;&lt;a class=&quot;a2a_button_google_plus&quot; href=&quot;https://www.addtoany.com/add_to/google_plus?linkurl=http%3A%2F%2Fwww.blog.pythonlibrary.org%2F2018%2F02%2F13%2Freportlab-book-chapter-sampler%2F&amp;linkname=ReportLab%20Book%20Chapter%20Sampler&quot; title=&quot;Google+&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;&lt;a class=&quot;a2a_dd addtoany_share_save addtoany_share&quot; href=&quot;https://www.addtoany.com/share#url=http%3A%2F%2Fwww.blog.pythonlibrary.org%2F2018%2F02%2F13%2Freportlab-book-chapter-sampler%2F&amp;title=ReportLab%20Book%20Chapter%20Sampler&quot;&gt;&lt;/a&gt;&lt;/p&gt;</description>
	<pubDate>Tue, 13 Feb 2018 18:15:53 +0000</pubDate>
</item>
<item>
	<title>Codementor: How and why I am building Multiformat</title>
	<guid>https://www.codementor.io/adammoller/how-and-why-i-am-building-multiformat-gp3dp74ln</guid>
	<link>https://www.codementor.io/adammoller/how-and-why-i-am-building-multiformat-gp3dp74ln</link>
	<description>Multiformat is a Python package for generating documents in multiple formats, including PDF, PNG, GIF and JPEG</description>
	<pubDate>Tue, 13 Feb 2018 17:41:03 +0000</pubDate>
</item>
<item>
	<title>Anwesha Das: The danger of modern medical devices : Keynote by Karen Sandler at LCA 2018</title>
	<guid>http://anweshadas.in/the-danger-of-modern-medical-devices/</guid>
	<link>http://anweshadas.in/the-danger-of-modern-medical-devices/</link>
	<description>&lt;p&gt;&lt;a href=&quot;https://twitter.com/o0karen0o&quot;&gt;Karen Sandler&lt;/a&gt; the cyborg lawyer  (quite literally; she has a defibrillator in her heart) has always been a source of inspiration to me. Unfortunate me has missed three invaluable opportunities to meet her in person. But I never miss a chance to see if I can meet, or see her online. So whenever she is giving a talk, I eagerly wait for the videos to come online.&lt;/p&gt;

&lt;p&gt;I’m a big fan if you can’t tell :)&lt;/p&gt;

&lt;p&gt;This year she was one of the keynote speakers at &lt;a href=&quot;https://linux.conf.au/about/&quot;&gt;LINUXCONFAU,2018&lt;/a&gt; and I was (as usual) is at the mercy of the conference organizers to watch her talk as soon as possible. They were very efficient. &lt;a href=&quot;https://www.youtube.com/watch?v=8wPAHu_zYDw&quot;&gt;The video was posted really quickly&lt;/a&gt; &lt;br /&gt;
Thank You, LCA!&lt;/p&gt;

&lt;p&gt;The first time I encountered Karen was in 2016 when I watched her [2012 Keynote at LCA, &lt;a href=&quot;https://www.youtube.com/watch?v=5XDTQLa3NjE&quot;&gt;Freedom in my heart and everywhere&lt;/a&gt;. The talk pointed me to the problems which were an integral part of our life, crucial to our existence. The proprietary software in our medical devices and the danger lies in them. The lawyer in me started looking at all medical devices with a suspicious eye. Doctors appeared to me like Agent Smith and us patients, like Neo having some bug tracker inside our body. &lt;br /&gt;
On another very personal note, she was the first person who actually talked about something that I could understand, connect with, though it was technical at the core.&lt;/p&gt;

&lt;p&gt;This year her keynote at LCA was titled: &lt;a href=&quot;https://www.youtube.com/watch?v=8wPAHu_zYDw&quot;&gt;“Six Years Later, or Hey, did you ever get the source code to that thing in your heart?”&lt;/a&gt;. This talk is, in essence, the epilogue, to her 2012 keynote. It involved the dangers of having proprietary, closed source software in medical devices and generating awareness around it.The talk to me was a story connecting her personal life and her passion, software freedom.&lt;/p&gt;

&lt;p&gt;She started her story with a question, which she was often asked after she gave her talk in 2012, “Hey did you ever get your source code?” By definition, a cyborg is “a person whose physiological functioning is aided by or dependent upon a mechanical or electronic device.” Pacemakers, hearing aids, even our innocent looking glasses make us cyborgs. If not all, at least a vast number of us humans, are cyborgs. The distinction between who is a cyborg and who is not is becoming increasingly blurred.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;We all are in the process of becoming or unbecoming cyborgs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And so,  she aims to create a world where we have a number of free and open source alternatives to proprietary software. Moreover, she raised another fundamental point on the ethics of such software in devices that our lives, literally, depend on.&lt;/p&gt;

&lt;p&gt;Being well aware of our ignorance, she walked us through various aspects of the legal, technical, community, and the social aspects of having buggy software in medical devices. &lt;br /&gt;
In her own words these wifi enabled devices &quot;have the worst of both the worlds”, running proprietary software inside them and no security at all.&lt;/p&gt;

&lt;p&gt;In the next part of her talk, she discussed the &lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_Millennium_Copyright_Act&quot;&gt;DMCA,  Digital Millennium Copyright Act, 1998&lt;/a&gt;. It forbids, criminalizes any act to bypass access controls for devices like these, even if it is permissible under the Copyright Act itself. Therefore the passwords which the copyright holder has put in place cannot be changed. No exceptions, no exemptions. So under any circumstance, no one could check the security/safety of their own device. &lt;br /&gt;
Then she broke the good news on &lt;a href=&quot;https://sfconservancy.org/news/2017/oct/30/dmca-exemptions-renewed/&quot;&gt;how she got the exemption, citing her own scenario&lt;/a&gt;. She shared her personal stories to explain the situations and dangers that lay. &lt;br /&gt;
She also ran through various incidents showing vulnerabilities of various medical devices.&lt;/p&gt;

&lt;p&gt;The best part of the talk came in the closing moments, where this free and open source advocate held forth on how can we implement and follow free software in our daily life.&lt;/p&gt;

&lt;p&gt;To summarise,&lt;/p&gt;

&lt;p&gt;The talk enlightened us about existing and emerging threats in the sphere of medical devices. &lt;br /&gt;
Why and how free and open source software has solutions to many of these situations. &lt;br /&gt;
Most importantly she emphasized that we as a community have a responsibility towards making the situation better.&lt;/p&gt;

&lt;p&gt;You are a true superhero, when you have skin in the game (literally your &lt;em&gt;heart&lt;/em&gt; in the game) and can actually stick to your beliefs and passions, even your life is at risk. &lt;/p&gt;

&lt;p&gt;Thank you Karen, for being able to think differently and for your constant efforts to make the world a better place. &lt;br /&gt;
Looking forward to your next talk. See you sometime, somewhere, and until then will adore you online.&lt;/p&gt;

&lt;p&gt;To read further about medical devices and tracking, go to &lt;a href=&quot;https://www.theatlantic.com/technology/archive/2018/01/my-pacemaker-is-tracking-me-from-inside-my-body/551681/&quot;&gt;this post&lt;/a&gt;. &lt;/p&gt;</description>
	<pubDate>Tue, 13 Feb 2018 17:19:04 +0000</pubDate>
</item>
<item>
	<title>Real Python: Object-Oriented Programming (OOP) in Python 3</title>
	<guid>https://realpython.com/blog/python/python3-object-oriented-programming/</guid>
	<link>https://realpython.com/blog/python/python3-object-oriented-programming/</link>
	<description>&lt;p&gt;In this article you’ll pick up the following basic concepts of OOP in Python:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python Classes&lt;/li&gt;
&lt;li&gt;Object Instances&lt;/li&gt;
&lt;li&gt;Defining and Working with Methods&lt;/li&gt;
&lt;li&gt;OOP Inheritance&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;alert alert-warning&quot;&gt;&lt;p&gt;&lt;strong&gt;Free Bonus:&lt;/strong&gt; &lt;a href=&quot;https://realpython.com/atom.xml&quot; class=&quot;alert-link&quot;&gt;Click here to get access to a free Python OOP Cheat Sheet&lt;/a&gt; that points you to the best tutorials, videos, and books to learn more about Object-Oriented Programming with Python.&lt;/p&gt;&lt;/div&gt;

&lt;h2 id=&quot;what-is-object-oriented-programming-oop&quot;&gt;What Is Object-Oriented Programming (OOP)?&lt;/h2&gt;
&lt;p&gt;Object-oriented Programming, or &lt;em&gt;OOP&lt;/em&gt; for short, is a &lt;a href=&quot;http://en.wikipedia.org/wiki/Programming_paradigm&quot;&gt;programming paradigm&lt;/a&gt; which provides a means of structuring programs so that properties and behaviors are bundled into individual &lt;em&gt;objects&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;For instance, an object could represent a person with a name property, age, address, etc., with behaviors like walking, talking, breathing, and running. Or an email with properties like recipient list, subject, body, etc., and behaviors like adding attachments and sending. &lt;/p&gt;
&lt;p&gt;Put another way, object-oriented programming is an approach for modeling concrete, real-world things like cars as well as relations between things like companies and employees, students and teachers, etc. OOP models real-world entities as software objects, which have some data associated with them and can perform certain functions.&lt;/p&gt;
&lt;p&gt;Another common programming paradigm is &lt;em&gt;procedural programming&lt;/em&gt; which structures a program like a recipe in that it provides a set of steps, in the form of functions and code blocks, which flow sequentially in order to complete a task.&lt;/p&gt;
&lt;p&gt;The key takeaway is that objects are at the center of the object-oriented programming paradigm, not only representing the data, as in procedural programming, but in the overall structure of the program as well.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: Since Python is a multi-paradigm programming language, you can choose the paradigm that best suits the problem at hand, mix different paradigms in one program, and/or switch from one paradigm to another as your program evolves.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;classes-in-python&quot;&gt;Classes in Python&lt;/h2&gt;
&lt;p&gt;Focusing first on the data, each thing or object is an instance of some &lt;em&gt;class&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The primitive data structures available in Python, like numbers, strings, and lists are designed to represent simple things like the cost of something, the name of a poem, and your favorite colors, respectively. &lt;/p&gt;
&lt;p&gt;What if you wanted to represent something much more complicated? &lt;/p&gt;
&lt;p&gt;For example, let&amp;rsquo;s say you wanted to track a number of different animals. If you used a list, the first element could be the animal&amp;rsquo;s name while the second element could represent its age. &lt;/p&gt;
&lt;p&gt;How would you know which element is supposed to be which? What if you had 100 different animals? Are you certain each animal has both a name and an age, and so forth? What if you wanted to add other properties to these animals? This lacks organization, and it&amp;rsquo;s the exact need for &lt;em&gt;classes&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Classes are used to create new user-defined data structures that contain arbitrary information about something. In the case of an animal, we could create an &lt;code&gt;Animal()&lt;/code&gt; class to track properties about the Animal like the name and age.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s important to note that a class just provides structure&amp;mdash;it&amp;rsquo;s a blueprint for how something should be defined, but it doesn&amp;rsquo;t actually provide any real content itself. The &lt;code&gt;Animal()&lt;/code&gt; class may specify that the name and age are necessary for defining an animal, but it will not actually state what a specific animal&amp;rsquo;s name or age is.&lt;/p&gt;
&lt;p&gt;It may help to think of a class as an &lt;em&gt;idea&lt;/em&gt; for how something should be defined.&lt;/p&gt;
&lt;h2 id=&quot;python-objects-instances&quot;&gt;Python Objects (Instances)&lt;/h2&gt;
&lt;p&gt;While the class is the blueprint, an &lt;em&gt;instance&lt;/em&gt; is a copy of the class with &lt;em&gt;actual&lt;/em&gt; values, literally an object belonging to a specific class. It&amp;rsquo;s not an idea anymore; it&amp;rsquo;s an actual animal, like a dog named Roger who&amp;rsquo;s eight years old.&lt;/p&gt;
&lt;p&gt;Put another way, a class is like a form or questionnaire. It defines the needed information. After you fill out the form, your specific copy is an instance of the class; it contains actual information relevant to you. &lt;/p&gt;
&lt;p&gt;You can fill out multiple copies to create many different instances, but without the form as a guide, you would be lost, not knowing what information is required. Thus, before you can create individual instances of an object, we must first specify what is needed by defining a class.&lt;/p&gt;
&lt;h2 id=&quot;how-to-define-a-class-in-python&quot;&gt;How To Define a Class in Python&lt;/h2&gt;
&lt;p&gt;Defining a class is simple in Python:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You start with the &lt;code&gt;class&lt;/code&gt; keyword to indicate that you are creating a class, then you add the name of the class (using &lt;a href=&quot;https://en.wikipedia.org/wiki/Camel_case&quot;&gt;CamelCase notation&lt;/a&gt;, starting with a capital letter.) &lt;/p&gt;
&lt;p&gt;Also, we used the Python keyword &lt;code&gt;pass&lt;/code&gt; here. This is very often used as a place holder where code will eventually go. It allows us to run this code without throwing an error.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The above code is correct on Python 3. On Python 2.x (&amp;ldquo;legacy Python&amp;rdquo;) you&amp;rsquo;d use a slightly different class definition:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Python 2.x Class Definition:&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;(object)&lt;/code&gt; part in parentheses specifies the parent class that you are inheriting from (more on this below.) In Python 3 this is no longer necessary because it is the implicit default.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;instance-attributes&quot;&gt;Instance Attributes&lt;/h3&gt;
&lt;p&gt;All classes create objects, and all objects contain characteristics called attributes (referred to as properties in the opening paragraph). Use the &lt;code&gt;__init__()&lt;/code&gt; method to initialize (e.g., specify) an object&amp;rsquo;s initial attributes by giving them their default value (or state). This method must have at least one argument as well as the &lt;code&gt;self&lt;/code&gt; variable, which refers to the object itself (e.g., Dog).&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Initializer / Instance Attributes&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fm&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In the case of our &lt;code&gt;Dog()&lt;/code&gt; class, each dog has a specific name and age, which is obviously important to know for when you start actually creating different dogs. Remember: the class is just for defining the Dog, not actually creating &lt;em&gt;instances&lt;/em&gt; of individual dogs with specific names and ages; we&amp;rsquo;ll get to that shortly.&lt;/p&gt;
&lt;p&gt;Similarly, the &lt;code&gt;self&lt;/code&gt; variable is also an instance of the class. Since instances of a class have varying values we could state &lt;code&gt;Dog.name = name&lt;/code&gt; rather than &lt;code&gt;self.name = name&lt;/code&gt;. But since not all dogs share the same name, we need to be able to assign different values to different instances. Hence the need for the special &lt;code&gt;self&lt;/code&gt; variable, which will help to keep track of individual instances of each class.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: You will never have to call the &lt;code&gt;__init__()&lt;/code&gt; method; it gets called automatically when you create a new &amp;lsquo;Dog&amp;rsquo; instance.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;class-attributes&quot;&gt;Class Attributes&lt;/h3&gt;
&lt;p&gt;While instance attributes are specific to each object, class attributes are the same for all instances&amp;mdash;which in this case is &lt;em&gt;all&lt;/em&gt; dogs.&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Class Attribute&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;species&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'mammal'&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Initializer / Instance Attributes&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fm&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So while each dog has a unique name and age, every dog will be a mammal.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s create some dogs&amp;hellip;&lt;/p&gt;
&lt;h2 id=&quot;instantiating-objects&quot;&gt;Instantiating Objects&lt;/h2&gt;
&lt;p&gt;Instantiating is a fancy term for creating a new, unique instance of a class.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;lt;__main__.Dog object at 0x1004ccc50&amp;gt;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;lt;__main__.Dog object at 0x1004ccc90&amp;gt;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We started by defining a new &lt;code&gt;Dog()&lt;/code&gt; class, then created two new dogs, each assigned to different objects. So, to create an instance of a class, you use the the class name, followed by parentheses. Then to demonstrate that each instance is actually different, we instantiated two more dogs, assigning each to a variable, then tested if those variables are equal.&lt;/p&gt;
&lt;p&gt;What do you think the type of a class instance is?&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;lt;class '__main__.Dog'&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Let&amp;rsquo;s look at a slightly more complex example&amp;hellip;&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Class Attribute&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;species&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'mammal'&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Initializer / Instance Attributes&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fm&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;# Instantiate the Dog object&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;philo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Philo&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mikey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Mikey&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Access the instance attributes&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;{} is {} and {} is {}.&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;philo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;philo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mikey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mikey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Is Philo a mammal?&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;philo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;species&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;mammal&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;{0} is a {1}!&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;philo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;philo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;species&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: Notice how we use dot notation to access attributes from each object.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Save this as &lt;em&gt;dog_class.py&lt;/em&gt;, then run the program. You should see:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Philo is 5 and Mikey is 6.
Philo is a mammal!
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;whats-going-on&quot;&gt;What&amp;rsquo;s Going On?&lt;/h3&gt;
&lt;p&gt;We created a new instance of the &lt;code&gt;Dog()&lt;/code&gt; class and assigned it to the variable &lt;code&gt;philo&lt;/code&gt;. We then passed it two arguments, &lt;code&gt;&quot;Philo&quot;&lt;/code&gt; and &lt;code&gt;5&lt;/code&gt;, which represent that dog&amp;rsquo;s name and age, respectively. &lt;/p&gt;
&lt;p&gt;These attributes are passed to the &lt;code&gt;__init__&lt;/code&gt; method, which gets called any time you create a new instance, attaching the name and age to the object. You might be wondering why we didn&amp;rsquo;t have to pass in the &lt;code&gt;self&lt;/code&gt; argument. &lt;/p&gt;
&lt;p&gt;This is Python magic; when you create a new instance of the class, Python automatically determines what &lt;code&gt;self&lt;/code&gt; is (a Dog in this case) and passes it to the &lt;code&gt;__init__&lt;/code&gt; method.&lt;/p&gt;
&lt;h3 id=&quot;review-exercises-1&quot;&gt;Review Exercises (#1)&lt;/h3&gt;
&lt;div class=&quot;card&quot; id=&quot;exercises_card1&quot;&gt;
&lt;div class=&quot;card-header&quot;&gt;&lt;p class=&quot;m-0&quot;&gt;&quot;The Oldest Dog&quot; &lt;button class=&quot;btn btn-link&quot;&gt;Show/Hide&lt;/button&gt;&lt;/p&gt;&lt;/div&gt;
&lt;div id=&quot;exercises1&quot; class=&quot;collapse&quot;&gt;&lt;div class=&quot;card-body&quot;&gt;

&lt;p&gt;Using the same &lt;code&gt;Dog()&lt;/code&gt; class, instantiate three new dogs, each with a different age. Then write a function called, &lt;code&gt;get_biggest_number()&lt;/code&gt;, that takes any number of ages (&lt;code&gt;*args&lt;/code&gt;) and returns the oldest one. Then output the age of the oldest dog like so:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;The oldest dog is 7 years old.
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;h2 id=&quot;instance-methods&quot;&gt;Instance Methods&lt;/h2&gt;
&lt;p&gt;Instance methods are defined inside a class and are used to get the contents of an instance. They can also be used to perform operations with the attributes of our objects. Like the &lt;code&gt;__init__&lt;/code&gt; method, the first argument is always &lt;code&gt;self&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Class Attribute&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;species&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'mammal'&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Initializer / Instance Attributes&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fm&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# instance method&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;{} is {} years old&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# instance method&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;speak&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;{} says {}&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Instantiate the Dog object&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mikey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Mikey&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# call our instance methods&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mikey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mikey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;speak&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Gruff Gruff&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Save this as &lt;em&gt;dog_instance_methods.py&lt;/em&gt;, then run it:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Mikey is 6 years old
Mikey says Gruff Gruff
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In the latter method, &lt;code&gt;speak()&lt;/code&gt;, we are defining behavior. What other behaviors could you assign to a dog? Look back to the beginning paragraph to see some example behaviors for other objects.&lt;/p&gt;
&lt;h3 id=&quot;modifying-attributes&quot;&gt;Modifying Attributes&lt;/h3&gt;
&lt;p&gt;You can change the value of attributes based on some behavior:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fm&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_sent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;send_email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_sent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;my_email&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;my_email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_sent&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;False&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;my_email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send_email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;my_email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_sent&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here, we added a method to send an email, which updates the &lt;code&gt;is_sent&lt;/code&gt; variable to &lt;code&gt;True&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;python-object-inheritance&quot;&gt;Python Object Inheritance&lt;/h2&gt;
&lt;p&gt;Inheritance is the process by which one class takes on the attributes and methods of another. Newly formed classes are called &lt;em&gt;child classes&lt;/em&gt;, and the classes that child classes are derived from are called &lt;em&gt;parent classes&lt;/em&gt;. &lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s important to note that child classes override &lt;em&gt;or&lt;/em&gt; extend the functionality (e.g., attributes and behaviors) of parent classes. In other words, child classes inherit all of the parent&amp;rsquo;s attributes and behaviors but can also specify different behavior to follow. The most basic type of class is an &lt;code&gt;object&lt;/code&gt;, which generally all other classes inherit as their parent.&lt;/p&gt;
&lt;p&gt;When you define a new class, Python 3 it implicitly uses &lt;code&gt;object&lt;/code&gt; as the parent class. So the following two definitions are equivalent:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# In Python 3, this is the same as:&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; In Python 2.x there&amp;rsquo;s a distinction between &lt;a href=&quot;https://wiki.python.org/moin/NewClassVsClassicClass&quot;&gt;&lt;em&gt;new-style&lt;/em&gt; and &lt;em&gt;old-style&lt;/em&gt; classes&lt;/a&gt;. I won&amp;rsquo;t go into detail here, but you&amp;rsquo;ll generally want to specify &lt;code&gt;object&lt;/code&gt; as the parent class to ensure you&amp;rsquo;re definint a new-style class if you&amp;rsquo;re writing Python 2 OOP code.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;dog-park-example&quot;&gt;Dog Park Example&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s pretend that we&amp;rsquo;re at a dog park. There are multiple Dog objects engaging in Dog behaviors, each with different attributes. In regular-speak that means some dogs are running, while some are stretching and some are just watching other dogs. Furthermore, each dog has been named by its owner and, since each dog is living and breathing, each ages.&lt;/p&gt;
&lt;p&gt;What&amp;rsquo;s another way to differentiate one dog from another? How about the dog&amp;rsquo;s breed:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fm&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;breed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;breed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;breed&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spencer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;German Shepard&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spencer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;breed&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;'German Shepard'&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sara&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Boston Terrier&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sara&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;breed&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;'Boston Terrier'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Each breed of dog has slightly different behaviors. To take these into account, let&amp;rsquo;s create separate classes for each breed. These are child classes of the parent &lt;code&gt;Dog&lt;/code&gt; class.&lt;/p&gt;
&lt;h3 id=&quot;extending-the-functionality-of-a-parent-class&quot;&gt;Extending the Functionality of a Parent Class&lt;/h3&gt;
&lt;p&gt;Create a new file called &lt;em&gt;dog_inheritance.py&lt;/em&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Parent class&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Class attribute&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;species&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'mammal'&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Initializer / Instance attributes&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fm&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# instance method&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;{} is {} years old&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# instance method&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;speak&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;{} says {}&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;# Child class (inherits from Dog class)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RussellTerrier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;speed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;{} runs {}&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;speed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;# Child class (inherits from Dog class)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bulldog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;speed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;{} runs {}&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;speed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;# Child classes inherit attributes and&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# behaviors from the parent class&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;jim&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bulldog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Jim&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jim&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Child classes have specific attributes&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# and behaviors as well&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jim&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;slowly&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Read the comments aloud as you work through this program to help you understand what&amp;rsquo;s happening, then before you run the program, see if you can predict the expected output.&lt;/p&gt;
&lt;p&gt;You should see:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Jim is 12 years old
Jim runs slowly
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We haven&amp;rsquo;t added any special attributes or methods to differentiate a &lt;code&gt;RussellTerrier&lt;/code&gt; from a &lt;code&gt;Bulldog&lt;/code&gt;, but since they&amp;rsquo;re now two different classes, we could for instance give them different class attributes defining their respective speeds.&lt;/p&gt;
&lt;h3 id=&quot;parent-vs-child-classes&quot;&gt;Parent vs. Child Classes&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;isinstance()&lt;/code&gt; function is used to determine if an instance is also an instance of a certain parent class.&lt;/p&gt;
&lt;p&gt;Save this as &lt;em&gt;dog_isinstance.py&lt;/em&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Parent class&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Class attribute&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;species&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'mammal'&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Initializer / Instance attributes&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fm&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# instance method&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;{} is {} years old&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# instance method&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;speak&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;{} says {}&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;# Child class (inherits from Dog() class)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RussellTerrier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;speed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;{} runs {}&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;speed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;# Child class (inherits from Dog() class)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bulldog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;speed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;{} runs {}&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;speed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;# Child classes inherit attributes and&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# behaviors from the parent class&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;jim&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bulldog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Jim&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jim&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Child classes have specific attributes&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# and behaviors as well&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jim&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;slowly&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Is jim an instance of Dog()?&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;isinstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Is julie an instance of Dog()?&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;julie&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Julie&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;isinstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;julie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Is johnny walker an instance of Bulldog()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;johnnywalker&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RussellTerrier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Johnny Walker&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;isinstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;johnnywalker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bulldog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Is julie and instance of jim?&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;isinstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;julie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Output:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;('Jim', 12)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Jim runs slowly&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;False&lt;/span&gt;
&lt;span class=&quot;gt&quot;&gt;Traceback (most recent call last):&lt;/span&gt;
  File &lt;span class=&quot;nb&quot;&gt;&amp;quot;dog_isinstance.py&amp;quot;&lt;/span&gt;, line &lt;span class=&quot;m&quot;&gt;50&lt;/span&gt;, in &lt;span class=&quot;n&quot;&gt;&amp;lt;module&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;isinstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;julie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gr&quot;&gt;TypeError&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;isinstance() arg 2 must be a class, type, or tuple of classes and types&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Make sense? Both &lt;code&gt;jim&lt;/code&gt; and &lt;code&gt;julie&lt;/code&gt; are instances of the &lt;code&gt;Dog()&lt;/code&gt; class, while &lt;code&gt;johnnywalker&lt;/code&gt; is not an instance of the &lt;code&gt;Bulldog()&lt;/code&gt; class. Then as a sanity check, we tested if &lt;code&gt;julie&lt;/code&gt; is an instance of &lt;code&gt;jim&lt;/code&gt;, which is impossible since &lt;code&gt;jim&lt;/code&gt; is an &lt;code&gt;instance&lt;/code&gt; of a class rather than a class itself&amp;mdash;hence the reason for the &lt;code&gt;TypeError&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;overriding-the-functionality-of-a-parent-class&quot;&gt;Overriding the Functionality of a Parent Class&lt;/h3&gt;
&lt;p&gt;Remember that child classes can also override attributes and behaviors from the parent class. For examples:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;species&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'mammal'&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SomeBreed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SomeOtherBreed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;species&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'reptile'&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frank&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SomeBreed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frank&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;species&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;'mammal'&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SomeOtherBreed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beans&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;species&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;'reptile'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;SomeBreed()&lt;/code&gt; class inherits the &lt;code&gt;species&lt;/code&gt; from the parent class, while the &lt;code&gt;SomeOtherBreed()&lt;/code&gt; class overrides the &lt;code&gt;species&lt;/code&gt;, setting it to &lt;code&gt;reptile&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;review-exercises-2&quot;&gt;Review Exercises (#2)&lt;/h3&gt;
&lt;div class=&quot;card&quot; id=&quot;exercises_card21&quot;&gt;
&lt;div class=&quot;card-header&quot;&gt;&lt;p class=&quot;m-0&quot;&gt;&quot;Dog Inheritance&quot; &lt;button class=&quot;btn btn-link&quot;&gt;Show/Hide&lt;/button&gt;&lt;/p&gt;&lt;/div&gt;
&lt;div id=&quot;exercises21&quot; class=&quot;collapse&quot;&gt;&lt;div class=&quot;card-body&quot;&gt;

&lt;p&gt;Create a &lt;code&gt;Pet()&lt;/code&gt; class that holds instances of dogs; this class is completely separate from the &lt;code&gt;Dog()&lt;/code&gt; class. In other words, the &lt;code&gt;Dog()&lt;/code&gt; class does not inherit from the &lt;code&gt;Pet()&lt;/code&gt; class. Then assign three dog instances to the &lt;code&gt;Pet()&lt;/code&gt; class. Start with the following code below. Save the file as &lt;em&gt;pet_class.py&lt;/em&gt;. Your output should look like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;I have 3 dogs. Tom is 6. Mike is 7. Larry is 9. And they're all mammals, of course.
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Starter code:&lt;/p&gt;
&lt;div class=&quot;highlight python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Parent class&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Class attribute&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;species&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'mammal'&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Initializer / Instance attributes&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fm&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# instance method&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;{} is {} years old&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# instance method&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;speak&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;{} says {}&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# child class (inherits from Dog() class)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RussellTerrier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;speed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;{} runs {}&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;speed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# child class (inherits from Dog() class)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bulldog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;speed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;{} runs {}&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;speed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;card mt-3&quot; id=&quot;exercises_card22&quot;&gt;
&lt;div class=&quot;card-header&quot;&gt;&lt;p class=&quot;m-0&quot;&gt;&quot;Hungry Dogs&quot; &lt;button class=&quot;btn btn-link&quot;&gt;Show/Hide&lt;/button&gt;&lt;/p&gt;&lt;/div&gt;
&lt;div id=&quot;exercises22&quot; class=&quot;collapse&quot;&gt;&lt;div class=&quot;card-body&quot;&gt;

&lt;p&gt;Using the same file, add a class attribute of &lt;code&gt;is_hungry = True&lt;/code&gt; to the &lt;code&gt;Dog()&lt;/code&gt; class. Then add a method called &lt;code&gt;eat()&lt;/code&gt; which changes the value of &lt;code&gt;is_hungry&lt;/code&gt; to &lt;code&gt;False&lt;/code&gt; when called. Figure out the best way to feed each dog and then output &amp;ldquo;My dogs are hungry.&amp;rdquo; if all are hungry or &amp;ldquo;My dogs are not hungry.&amp;rdquo; if all are not hungry. The final output should look like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;I have 3 dogs. Tom is 6. Mike is 7. Larry is 9. 
And they're all mammals, of course. My dogs are not hungry.
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;card mt-3&quot; id=&quot;exercises_card23&quot;&gt;
&lt;div class=&quot;card-header&quot;&gt;&lt;p class=&quot;m-0&quot;&gt;&quot;Dog Walking&quot; &lt;button class=&quot;btn btn-link&quot;&gt;Show/Hide&lt;/button&gt;&lt;/p&gt;&lt;/div&gt;
&lt;div id=&quot;exercises23&quot; class=&quot;collapse&quot;&gt;&lt;div class=&quot;card-body&quot;&gt;

&lt;p&gt;Next, add a &lt;code&gt;walk()&lt;/code&gt; method to both the &lt;code&gt;Pet()&lt;/code&gt; and &lt;code&gt;Dog()&lt;/code&gt; classes so that when you call the method on the &lt;code&gt;Pet()&lt;/code&gt; class, each dog instance assigned to the &lt;code&gt;Pet()&lt;/code&gt; class will &lt;code&gt;walk()&lt;/code&gt;. Save this as &lt;em&gt;dog_walking.py&lt;/em&gt;. This is slightly more difficult. &lt;/p&gt;
&lt;p&gt;Start by implementing the method in the same manner as the &lt;code&gt;speak()&lt;/code&gt; method. As for the method in the &lt;code&gt;Pet()&lt;/code&gt; class, you will need to iterate through the list of dogs, then call the method itself.&lt;/p&gt;
&lt;p&gt;The output should look like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Tom is walking!
Mike is walking!
Larry is walking!
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;card mt-3&quot; id=&quot;exercises_card24&quot;&gt;
&lt;div class=&quot;card-header&quot;&gt;&lt;p class=&quot;m-0&quot;&gt;&quot;Comprehension Check&quot; &lt;button class=&quot;btn btn-link&quot;&gt;Show/Hide&lt;/button&gt;&lt;/p&gt;&lt;/div&gt;
&lt;div id=&quot;exercises24&quot; class=&quot;collapse&quot;&gt;&lt;div class=&quot;card-body&quot;&gt;

&lt;p&gt;Answer the following questions about OOP to check your learning progress:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;What&amp;rsquo;s a class?&lt;/li&gt;
&lt;li&gt;What&amp;rsquo;s an instance?&lt;/li&gt;
&lt;li&gt;What&amp;rsquo;s the relationship between a class and an instance?&lt;/li&gt;
&lt;li&gt;What&amp;rsquo;s the Python syntax used for defining a new class?&lt;/li&gt;
&lt;li&gt;What&amp;rsquo;s the spelling convention for a class name?&lt;/li&gt;
&lt;li&gt;How do you instantiate, or create an instance of, a class?&lt;/li&gt;
&lt;li&gt;How do you access the attributes and behaviors of a class instance?&lt;/li&gt;
&lt;li&gt;What&amp;rsquo;s a method?&lt;/li&gt;
&lt;li&gt;What&amp;rsquo;s the purpose of &lt;code&gt;self&lt;/code&gt;?&lt;/li&gt;
&lt;li&gt;What&amp;rsquo;s the purpose of the &lt;code&gt;__init__&lt;/code&gt; method?&lt;/li&gt;
&lt;li&gt;Describe how inheritance helps prevent code duplication.&lt;/li&gt;
&lt;li&gt;Can child classes override properties of their parents?&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;You should now know what classes are, why you would want or need to use them, and how to create both parent and child classes to better structure your programs.&lt;/p&gt;
&lt;p&gt;Please be aware that OOP is a programming paradigm and not a Python concept. Most of the modern programming languages such as Java, C#, C++ follow OOP principles. So the good news is that learning object-oriented programming fundamentals will be valuable to you in a variety of circumstances&amp;mdash;whether you’re working in Python or not.&lt;/p&gt;
&lt;p&gt;For further explanation of objected-oriented programming in Python, we recommend that you consult these additional resources:&lt;/p&gt;
&lt;div class=&quot;alert alert-warning&quot;&gt;&lt;p&gt;&lt;strong&gt;Free Bonus:&lt;/strong&gt; &lt;a href=&quot;https://realpython.com/atom.xml&quot; class=&quot;alert-link&quot;&gt;Click here to get access to a free Python OOP Cheat Sheet&lt;/a&gt; that points you to the best tutorials, videos, and books to learn more about Object-Oriented Programming with Python.&lt;/p&gt;&lt;/div&gt;
        &lt;hr /&gt;
        &lt;p&gt;&lt;em&gt;[ Improve Your Python With 🐍 Python Tricks 💌 – Get a short &amp;amp; sweet Python Trick delivered to your inbox every couple of days. &lt;a href=&quot;https://realpython.com/python-tricks/?utm_source=realpython&amp;utm_medium=rss&amp;utm_campaign=footer&quot;&gt;&amp;gt;&amp;gt; Click here to learn more and see examples&lt;/a&gt; ]&lt;/em&gt;&lt;/p&gt;</description>
	<pubDate>Tue, 13 Feb 2018 14:00:00 +0000</pubDate>
</item>
<item>
	<title>Codementor: Julia vs R vs Python: simple optimization</title>
	<guid>https://www.codementor.io/zhuojiadai/julia-vs-r-vs-python-simple-optimization-gnqi4njro</guid>
	<link>https://www.codementor.io/zhuojiadai/julia-vs-r-vs-python-simple-optimization-gnqi4njro</link>
	<description>In this post, I will try to compare and contrast Julia, R, and Python via a simple maximum likelihood optimization problem</description>
	<pubDate>Tue, 13 Feb 2018 12:30:52 +0000</pubDate>
</item>
<item>
	<title>Codementor: Long run probability of default (LRPD) estimation via truncated normal assumptions</title>
	<guid>https://www.codementor.io/zhuojiadai/long-run-probability-of-default-lrpd-estimation-via-truncated-normal-ggek1tjv3</guid>
	<link>https://www.codementor.io/zhuojiadai/long-run-probability-of-default-lrpd-estimation-via-truncated-normal-ggek1tjv3</link>
	<description>Want to estimate Long run probability of default (LRPD) but have insufficient data and/or do not have severe downturns in your data? This post details a novel method to estimate LRPD in such circumstance via truncated normal</description>
	<pubDate>Tue, 13 Feb 2018 12:29:51 +0000</pubDate>
</item>
<item>
	<title>Import Python: #162: A Free Python Book, Python's Weak Performance Matters, Credit Modeling with Dask and more</title>
	<guid>http://importpython.com/blog/post/162-free-python-book-pythons-weak-performance-matters-credit-modeling-dask-and-more</guid>
	<link>http://importpython.com/blog/post/162-free-python-book-pythons-weak-performance-matters-credit-modeling-dask-and-more</link>
	<description>&lt;table&gt;
                    &lt;tbody&gt;&lt;tr&gt;
                        &lt;td class=&quot;container-padding content&quot; align=&quot;left&quot;&gt;
                            &lt;div class=&quot;title&quot;&gt;
                                Worthy
                                Read
                            &lt;/div&gt;
                            &lt;br /&gt;
                            
                                &lt;div class=&quot;subtitle&quot;&gt;
                                    &lt;a href=&quot;https://goo.gl/WhA7kB&quot; target=&quot;_blank&quot;&gt;Scale Continuous Delivery for Your Enterprise?&lt;/a&gt;
                                &lt;/div&gt;
                                
                                    &lt;div class=&quot;body-text&quot;&gt;
                              
                                        
                                            GoCD is a Continuous Delivery tool allowing you to model, orchestrate, and visualize complex workflows. Our enterprise offering provides plugins and professional support to help your scale CD in your organization. Check out GOCD’s enterprise features and performance upgrades now! 
                                        
                                    &lt;br /&gt;
                            
                                    
                                        &lt;em&gt;&lt;div class=&quot;body-text&quot;&gt;advert&lt;/div&gt;&lt;/em&gt;
                                    
                                &lt;/div&gt;
                                &lt;br /&gt;
                            
                        
                                &lt;div class=&quot;subtitle&quot;&gt;
                                    &lt;a href=&quot;http://www.davekuhlman.org/python_book_01.html&quot; target=&quot;_blank&quot;&gt;A Free Python Book: Beginning Python, Advanced Python, and Python Exercises&lt;/a&gt;
                                &lt;/div&gt;
                                
                                    &lt;div class=&quot;body-text&quot;&gt;
                              
                                        
                                            This document is a self-learning document for a course in Python programming. This course contains (1) a part for beginners, (2) a discussion of several advanced topics that are of interest to Python programmers, and (3) a Python workbook with lots of exercises. 
                                        
                                    &lt;br /&gt;
                            
                                    
                                        &lt;em&gt;&lt;div class=&quot;body-text&quot;&gt;book&lt;/div&gt;&lt;/em&gt;
                                    
                                &lt;/div&gt;
                                &lt;br /&gt;
                            
                        
                                &lt;div class=&quot;subtitle&quot;&gt;
                                    &lt;a href=&quot;https://www.codemade.io/snapchat-like-augmented-reality-filters/?=yc&quot; target=&quot;_blank&quot;&gt;Snapchat-like Augmented Reality Filters&lt;/a&gt;
                                &lt;/div&gt;
                                
                                    &lt;div class=&quot;body-text&quot;&gt;
                              
                                        
                                            My project lets you try on virtual pairs of sunglasses or masks. To achieve this I utilized python, Dlib, OpenCV, Scipy, and Numpy. The pipeline involves opening a live webcam feed, detecting keypoints on faces in the feed, warping a png image of sunglasses to match the face, rotating the png with face movements, and blending the two images together so they look like one real image. 
                                        
                                    &lt;br /&gt;
                            
                                    
                                        &lt;em&gt;&lt;div class=&quot;body-text&quot;&gt;augmentedreality&lt;/div&gt;&lt;/em&gt;
                                    
                                &lt;/div&gt;
                                &lt;br /&gt;
                            
                        
                                &lt;div class=&quot;subtitle&quot;&gt;
                                    &lt;a href=&quot;https://ac1235.github.io/fractal-of-clean-design&quot; target=&quot;_blank&quot;&gt;Python - A Fractal of Clean Design&lt;/a&gt;
                                &lt;/div&gt;
                                
                                    &lt;div class=&quot;body-text&quot;&gt;
                              
                                        
                                            Some Python programmers like to think of their language as flawless. I personally know some Python programmers claiming that Python is superior to other languages in its clean design and unmatched elegance. This however isn’t true. Python has at least as many deep and fundamental flaws as most other languages, despite parts of its community claiming something different.

 
                                        
                                    &lt;br /&gt;
                            
                                    
                                        &lt;em&gt;&lt;div class=&quot;body-text&quot;&gt;core-python&lt;/div&gt;&lt;/em&gt;
                                    
                                &lt;/div&gt;
                                &lt;br /&gt;
                            
                        
                                &lt;div class=&quot;subtitle&quot;&gt;
                                    &lt;a href=&quot;http://4url.in/8VOAZnk0&quot; target=&quot;_blank&quot;&gt;Compare your DevOps progress to your peers ?&lt;/a&gt;
                                &lt;/div&gt;
                                
                                    &lt;div class=&quot;body-text&quot;&gt;
                              
                                        
                                            How Do You Compare?  Compare yourself to over 1,000 DevOps peers to see how they manage their processes. 
                                        
                                    &lt;br /&gt;
                            
                                    
                                        &lt;em&gt;&lt;div class=&quot;body-text&quot;&gt;advert&lt;/div&gt;,&lt;/em&gt;
                                    
                                        &lt;em&gt;&lt;div class=&quot;body-text&quot;&gt;devops&lt;/div&gt;&lt;/em&gt;
                                    
                                &lt;/div&gt;
                                &lt;br /&gt;
                            
                        
                                &lt;div class=&quot;subtitle&quot;&gt;
                                    &lt;a href=&quot;https://medium.com/@pycoder_boy/packaging-python-project-to-debian-deb-part-1-f01f510d7d10&quot; target=&quot;_blank&quot;&gt;Packaging Python Project to Debian .deb Part 1&lt;/a&gt;
                                &lt;/div&gt;
                                
                                    &lt;div class=&quot;body-text&quot;&gt;
                              
                                        
                                            Hi, Have you ever try to package your code/project to became&amp;nbsp;.deb or in official Debian or Ubuntu Repository to share to the rest of the world? 
                                        
                                    &lt;br /&gt;
                            
                                    
                                        &lt;em&gt;&lt;div class=&quot;body-text&quot;&gt;packaging&lt;/div&gt;&lt;/em&gt;
                                    
                                &lt;/div&gt;
                                &lt;br /&gt;
                            
                        
                                &lt;div class=&quot;subtitle&quot;&gt;
                                    &lt;a href=&quot;https://metarabbit.wordpress.com/2018/02/05/pythons-weak-performance-matters/&quot; target=&quot;_blank&quot;&gt;Python’s Weak Performance Matters&lt;/a&gt;
                                &lt;/div&gt;
                                
                                    &lt;div class=&quot;body-text&quot;&gt;
                              
                                        
                                            What changed in my reasoning?

First of all, I’m working on other problems. Whereas I used to do a lot of work that was very easy to map to numpy operations (which are fast as they use compiled code), now I write a lot of code which is not straight numerics. And, then, if I have to write it in standard Python, it is slow as molasses. I don’t mean slower in the sense of “wait a couple of seconds”, I mean “wait several hours instead of 2 minutes.” 
                                        
                                    &lt;br /&gt;
                            
                                    
                                        &lt;em&gt;&lt;div class=&quot;body-text&quot;&gt;performance&lt;/div&gt;&lt;/em&gt;
                                    
                                &lt;/div&gt;
                                &lt;br /&gt;
                            
                        
                                &lt;div class=&quot;subtitle&quot;&gt;
                                    &lt;a href=&quot;http://matthewrocklin.com/blog/work/2018/02/09/credit-models-with-dask&quot; target=&quot;_blank&quot;&gt;Credit Modeling with Dask&lt;/a&gt;
                                &lt;/div&gt;
                                
                                    &lt;div class=&quot;body-text&quot;&gt;
                              
                                        
                                            This post explores a real-world use case calculating complex credit models in Python using Dask. It is an example of a complex parallel system that is well outside of the traditional “big data” workloads. 
                                        
                                    &lt;br /&gt;
                            
                                    
                                        &lt;em&gt;&lt;div class=&quot;body-text&quot;&gt;dask&lt;/div&gt;&lt;/em&gt;
                                    
                                &lt;/div&gt;
                                &lt;br /&gt;
                            
                        
                                &lt;div class=&quot;subtitle&quot;&gt;
                                    &lt;a href=&quot;https://www.machinelearningplus.com/numpy-tutorial-part1-array-python-examples/&quot; target=&quot;_blank&quot;&gt;NumPy Tutorial Part 1 - Intro to Arrays in Python&lt;/a&gt;
                                &lt;/div&gt;
                                
                                    &lt;div class=&quot;body-text&quot;&gt;
                              
                                        
                                            Numpy is the most basic and a powerful package for scientific computing in python. This is part 1 of a mega-tutorial covering all the core aspects of performing data manipulation and analysis with numpy’s ndarrays.

 
                                        
                                    &lt;br /&gt;
                            
                                    
                                        &lt;em&gt;&lt;div class=&quot;body-text&quot;&gt;numpy&lt;/div&gt;&lt;/em&gt;
                                    
                                &lt;/div&gt;
                                &lt;br /&gt;
                            
                        
                                &lt;div class=&quot;subtitle&quot;&gt;
                                    &lt;a href=&quot;http://fedora.portingdb.xyz/&quot; target=&quot;_blank&quot;&gt;63.8% – Python 3 Porting Database&lt;/a&gt;
                                &lt;/div&gt;
                                
                                    &lt;div class=&quot;body-text&quot;&gt;
                              
                                        
                                            This is a dashboard to track progress of porting Fedora packages to Python 3.

 
                                        
                                    &lt;br /&gt;
                            
                                    
                                        &lt;em&gt;&lt;div class=&quot;body-text&quot;&gt;python3&lt;/div&gt;,&lt;/em&gt;
                                    
                                        &lt;em&gt;&lt;div class=&quot;body-text&quot;&gt;community&lt;/div&gt;,&lt;/em&gt;
                                    
                                        &lt;em&gt;&lt;div class=&quot;body-text&quot;&gt;fedora&lt;/div&gt;&lt;/em&gt;
                                    
                                &lt;/div&gt;
                                &lt;br /&gt;
                            
                        
                                &lt;div class=&quot;subtitle&quot;&gt;
                                    &lt;a href=&quot;http://templated-thoughts.blogspot.ae/2018/02/designing-async-task-dispatch-library.html&quot; target=&quot;_blank&quot;&gt;From Mordor, with love: Designing Async Task Dispatch Library From Scratch - Part-2&lt;/a&gt;
                                &lt;/div&gt;
                                
                                    &lt;div class=&quot;body-text&quot;&gt;
                              
                                        
                                            In layman terms, a future is an object which can hold the value or result of some computation done asynchronously. What does that mean ? 
                                        
                                    &lt;br /&gt;
                            
                                    
                                        &lt;em&gt;&lt;div class=&quot;body-text&quot;&gt;future&lt;/div&gt;&lt;/em&gt;
                                    
                                &lt;/div&gt;
                                &lt;br /&gt;
                            
                        
                                &lt;div class=&quot;subtitle&quot;&gt;
                                    &lt;a href=&quot;https://erikrood.com/Posts/py_gsheets.html&quot; target=&quot;_blank&quot;&gt;Python to Google Sheets&lt;/a&gt;
                                &lt;/div&gt;
                                
                                    &lt;div class=&quot;body-text&quot;&gt;
                              
                                    
                                        &lt;em&gt;&lt;div class=&quot;body-text&quot;&gt;google sheets&lt;/div&gt;&lt;/em&gt;
                                    
                                &lt;/div&gt;
                                &lt;br /&gt;
                            
                        
                                &lt;div class=&quot;subtitle&quot;&gt;
                                    &lt;a href=&quot;https://blog.modeanalytics.com/group-by-sql-python/&quot; target=&quot;_blank&quot;&gt;“Group By” in SQL and Python: a Comparison&lt;/a&gt;
                                &lt;/div&gt;
                                
                                    &lt;div class=&quot;body-text&quot;&gt;
                              
                                        
                                            Exploring the overlapping functionality of SQL and Python can help those of us familiar with one language become more adept with the other. And with a deep understanding of both, we can all make smarter decisions about how to combine and leverage each, making it easy to always choose the right tool for every task.

 
                                        
                                    &lt;br /&gt;
                            
                                    
                                        &lt;em&gt;&lt;div class=&quot;body-text&quot;&gt;pandas&lt;/div&gt;,&lt;/em&gt;
                                    
                                        &lt;em&gt;&lt;div class=&quot;body-text&quot;&gt;sql&lt;/div&gt;&lt;/em&gt;
                                    
                                &lt;/div&gt;
                                &lt;br /&gt;
                            
                        
                        &lt;br /&gt;
                        
                        
                        
                        &lt;div class=&quot;title&quot;&gt;
                            Projects
                        &lt;/div&gt;
                        &lt;div class=&quot;hr&quot;&gt;&lt;/div&gt;
                        &lt;br /&gt;
                        
                            &lt;div class=&quot;subtitle&quot;&gt;
                                &lt;a href=&quot;https://github.com/louisabraham/algnuth&quot; target=&quot;_blank&quot;&gt;algnuth&lt;/a&gt; -
                                &lt;small&gt;240 Stars, 6
                                Fork
                                &lt;/small&gt;
                            &lt;/div&gt;
                            &lt;div class=&quot;body-text&quot;&gt;
                                
                            Algebraic Number Theory package. 
                        &lt;/div&gt;
                        &lt;br /&gt;
                    
                            &lt;div class=&quot;subtitle&quot;&gt;
                                &lt;a href=&quot;https://github.com/DirtyCajunRice/grafana-scripts&quot; target=&quot;_blank&quot;&gt;grafana-scripts&lt;/a&gt; -
                                &lt;small&gt;54 Stars, 5
                                Fork
                                &lt;/small&gt;
                            &lt;/div&gt;
                            &lt;div class=&quot;body-text&quot;&gt;
                                
                            API scripts written (both pushing and pulling) to aggregate data into influxdb for grafana. 
                        &lt;/div&gt;
                        &lt;br /&gt;
                    
                            &lt;div class=&quot;subtitle&quot;&gt;
                                &lt;a href=&quot;https://github.com/dashee87/cryptory&quot; target=&quot;_blank&quot;&gt;cryptory&lt;/a&gt; -
                                &lt;small&gt;35 Stars, 3
                                Fork
                                &lt;/small&gt;
                            &lt;/div&gt;
                            &lt;div class=&quot;body-text&quot;&gt;
                                
                            Retrieve historical crpytocurrency data. 
                        &lt;/div&gt;
                        &lt;br /&gt;
                    
                            &lt;div class=&quot;subtitle&quot;&gt;
                                &lt;a href=&quot;https://github.com/liubobo/automation&quot; target=&quot;_blank&quot;&gt;automation&lt;/a&gt; -
                                &lt;small&gt;33 Stars, 8
                                Fork
                                &lt;/small&gt;
                            &lt;/div&gt;
                            &lt;div class=&quot;body-text&quot;&gt;
                                
                            code generator 
                        &lt;/div&gt;
                        &lt;br /&gt;
                    
                            &lt;div class=&quot;subtitle&quot;&gt;
                                &lt;a href=&quot;https://github.com/chris-belcher/electrum-personal-server&quot; target=&quot;_blank&quot;&gt;electrum-personal-server&lt;/a&gt; -
                                &lt;small&gt;31 Stars, 3
                                Fork
                                &lt;/small&gt;
                            &lt;/div&gt;
                            &lt;div class=&quot;body-text&quot;&gt;
                                
                            Maximally lightweight electrum server for a single user. 
                        &lt;/div&gt;
                        &lt;br /&gt;
                    
                            &lt;div class=&quot;subtitle&quot;&gt;
                                &lt;a href=&quot;https://github.com/cmatthewbrooks/r2kit&quot; target=&quot;_blank&quot;&gt;r2kit&lt;/a&gt; -
                                &lt;small&gt;28 Stars, 5
                                Fork
                                &lt;/small&gt;
                            &lt;/div&gt;
                            &lt;div class=&quot;body-text&quot;&gt;
                                
                            A set of scripts for a radare-based malware code analysis workflow. 
                        &lt;/div&gt;
                        &lt;br /&gt;
                    
                            &lt;div class=&quot;subtitle&quot;&gt;
                                &lt;a href=&quot;https://github.com/pavdmyt/git-ctm&quot; target=&quot;_blank&quot;&gt;git-ctm&lt;/a&gt; -
                                &lt;small&gt;24 Stars, 0
                                Fork
                                &lt;/small&gt;
                            &lt;/div&gt;
                            &lt;div class=&quot;body-text&quot;&gt;
                                
                            git Commit Time Machine. 
                        &lt;/div&gt;
                        &lt;br /&gt;
                    
                            &lt;div class=&quot;subtitle&quot;&gt;
                                &lt;a href=&quot;https://github.com/glennglennglenn/augmented-reality&quot; target=&quot;_blank&quot;&gt;augmented-reality&lt;/a&gt; -
                                &lt;small&gt;18 Stars, 4
                                Fork
                                &lt;/small&gt;
                            &lt;/div&gt;
                            &lt;div class=&quot;body-text&quot;&gt;
                                
                            Snapchat-like augmented reality filter. 
                        &lt;/div&gt;
                        &lt;br /&gt;
                    
                            &lt;div class=&quot;subtitle&quot;&gt;
                                &lt;a href=&quot;https://github.com/code-sploit/brutepanel&quot; target=&quot;_blank&quot;&gt;brutepanel&lt;/a&gt; -
                                &lt;small&gt;10 Stars, 0
                                Fork
                                &lt;/small&gt;
                            &lt;/div&gt;
                            &lt;div class=&quot;body-text&quot;&gt;
                                
                            Brute Panel is a modern admin login path finder written in Python. 
                        &lt;/div&gt;
                        &lt;br /&gt;
                    
                            &lt;div class=&quot;subtitle&quot;&gt;
                                &lt;a href=&quot;https://github.com/laixintao/feed&quot; target=&quot;_blank&quot;&gt;feed&lt;/a&gt; -
                                &lt;small&gt;7 Stars, 1
                                Fork
                                &lt;/small&gt;
                            &lt;/div&gt;
                            &lt;div class=&quot;body-text&quot;&gt;
                                
                            Some feeds output from feedly. 
                        &lt;/div&gt;
                        &lt;br /&gt;
                    
                            &lt;div class=&quot;subtitle&quot;&gt;
                                &lt;a href=&quot;https://github.com/EvilPort2/Simple-OpenCV-Calculator&quot; target=&quot;_blank&quot;&gt;Simple-OpenCV-Calculator&lt;/a&gt; -
                                &lt;small&gt;5 Stars, 4
                                Fork
                                &lt;/small&gt;
                            &lt;/div&gt;
                            &lt;div class=&quot;body-text&quot;&gt;
                                
                            A gesture controlled calculator. 
                        &lt;/div&gt;
                        &lt;br /&gt;
                    
                    
                        
                            &lt;img src=&quot;http://www.launchbit.com/taz-pixel/11284-6650-111&quot; /&gt;
                        
                    
                    
                &lt;/td&gt;
            &lt;/tr&gt;
        &lt;/tbody&gt;&lt;/table&gt;</description>
	<pubDate>Tue, 13 Feb 2018 09:57:26 +0000</pubDate>
</item>
<item>
	<title>Test and Code: 36: Stephanie Hurlburt - Mentoring and Open Office Hours</title>
	<guid>http://testandcode.com/36</guid>
	<link>http://testandcode.com/36</link>
	<description>&lt;p&gt;Stephanie is a co-founder and graphics engineer at Binomial.&lt;/p&gt;

&lt;p&gt;She works on Basis, an image compressor, and has customers in games, video, mapping, and any application that has lots of image data.&lt;/p&gt;

&lt;p&gt;Stephanie has also been encouraging experienced engineers to open up their twitter DMs to questions from anyone, to help mentor people not only in technical questions, but in career questions as well.&lt;/p&gt;

&lt;p&gt;She also sets aside some time to mentor people through skype when written form just doesn't cut it.&lt;/p&gt;

&lt;p&gt;That's the primary reason I have Stephanie on today, to talk about mentoring and open office hours.&lt;/p&gt;

&lt;p&gt;But we also talk about&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Binomial&lt;/li&gt;
&lt;li&gt;image compression&lt;/li&gt;
&lt;li&gt;texture mapping&lt;/li&gt;
&lt;li&gt;the use of both manual and automated testing for complex systems&lt;/li&gt;
&lt;li&gt;sane work hours&lt;/li&gt;
&lt;li&gt;work life balance&lt;/li&gt;
&lt;li&gt;and how long hours have led her to the opinions she holds today&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Special Guest: Stephanie Hurlburt.&lt;/p&gt;&lt;p&gt;Sponsored By:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a rel=&quot;nofollow&quot; href=&quot;https://www.patreon.com/testpodcast&quot;&gt;Patreon Supporters&lt;/a&gt;: &lt;a rel=&quot;nofollow&quot; href=&quot;https://www.patreon.com/testpodcast&quot;&gt;Help support the show with as little as $1 per month.
Funds help pay for expenses associated with the show.&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Links:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a title=&quot;Binomial&quot; rel=&quot;nofollow&quot; href=&quot;http://www.binomial.info/&quot;&gt;Binomial&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a title=&quot;List of Engineers Willing to Mentor You — Stephanie Hurlburt&quot; rel=&quot;nofollow&quot; href=&quot;http://stephaniehurlburt.com/blog/2016/11/14/list-of-engineers-willing-to-mentor-you&quot;&gt;List of Engineers Willing to Mentor You — Stephanie Hurlburt&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a title=&quot;Stephanie Hurlburt (@sehurlburt) | Twitter&quot; rel=&quot;nofollow&quot; href=&quot;https://twitter.com/sehurlburt&quot;&gt;Stephanie Hurlburt (@sehurlburt) | Twitter&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a title=&quot;Slack - Python Testing / Test &amp; Code&quot; rel=&quot;nofollow&quot; href=&quot;http://pythontesting.net/slack/&quot;&gt;Slack - Python Testing / Test &amp;amp; Code&lt;/a&gt; &amp;mdash; A super nice group of folks who are great at answering test related questions.&lt;/li&gt;&lt;/ul&gt;&amp;lt;p&amp;gt;Stephanie is a co-founder and graphics engineer at Binomial.&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;She works on Basis, an image compressor, and has customers in games, video, mapping, and any application that has lots of image data.&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;Stephanie has also been encouraging experienced engineers to open up their twitter DMs to questions from anyone, to help mentor people not only in technical questions, but in career questions as well.&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;She also sets aside some time to mentor people through skype when written form just doesn&amp;amp;#39;t cut it.&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;That&amp;amp;#39;s the primary reason I have Stephanie on today, to talk about mentoring and open office hours.&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;But we also talk about&amp;lt;/p&amp;gt;

&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;Binomial&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;image compression&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;texture mapping&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;the use of both manual and automated testing for complex systems&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;sane work hours&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;work life balance&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;and how long hours have led her to the opinions she holds today&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;&amp;lt;p&amp;gt;Special Guest: Stephanie Hurlburt.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;Sponsored By:&amp;lt;/p&amp;gt;&amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;&amp;lt;a rel=&quot;nofollow&quot; href=&quot;https://www.patreon.com/testpodcast&quot;&amp;gt;Patreon Supporters&amp;lt;/a&amp;gt;: &amp;lt;a rel=&quot;nofollow&quot; href=&quot;https://www.patreon.com/testpodcast&quot;&amp;gt;Help support the show with as little as $1 per month.
Funds help pay for expenses associated with the show.&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;p&amp;gt;Links:&amp;lt;/p&amp;gt;&amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;&amp;lt;a title=&quot;Binomial&quot; rel=&quot;nofollow&quot; href=&quot;http://www.binomial.info/&quot;&amp;gt;Binomial&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;a title=&quot;List of Engineers Willing to Mentor You — Stephanie Hurlburt&quot; rel=&quot;nofollow&quot; href=&quot;http://stephaniehurlburt.com/blog/2016/11/14/list-of-engineers-willing-to-mentor-you&quot;&amp;gt;List of Engineers Willing to Mentor You — Stephanie Hurlburt&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;a title=&quot;Stephanie Hurlburt (@sehurlburt) | Twitter&quot; rel=&quot;nofollow&quot; href=&quot;https://twitter.com/sehurlburt&quot;&amp;gt;Stephanie Hurlburt (@sehurlburt) | Twitter&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;a title=&quot;Slack - Python Testing / Test &amp;amp;amp; Code&quot; rel=&quot;nofollow&quot; href=&quot;http://pythontesting.net/slack/&quot;&amp;gt;Slack - Python Testing / Test &amp;amp;amp; Code&amp;lt;/a&amp;gt; &amp;amp;mdash; A super nice group of folks who are great at answering test related questions.&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;</description>
	<pubDate>Tue, 13 Feb 2018 07:15:00 +0000</pubDate>
</item>
<item>
	<title>Eric Holscher: Conference Mentorship</title>
	<guid>http://ericholscher.com/blog/2018/feb/13/conference-mentorship/</guid>
	<link>http://ericholscher.com/blog/2018/feb/13/conference-mentorship/</link>
	<description>&lt;div class=&quot;section&quot; id=&quot;conference-mentorship&quot;&gt;

&lt;p&gt;I have had the opportunity to provide mentorship to folks who have organized conferences twice in 2017.
Through this process I have realized the value in this practice,
and I&amp;#8217;d like to write this to promote others to do to same for first year conference organizers.&lt;/p&gt;
&lt;p&gt;I think this is a practice that would be very valuable to build inside the global Pycon &amp;amp; Write the Docs community conferences.
Having a mentor who has done it before will make life much easier for the people putting together their first conference.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;how-to-mentor&quot;&gt;
&lt;h2&gt;How to mentor&lt;/h2&gt;
&lt;p&gt;The most recent experience I had was doing this as PyCascades.
Looking back,
I would say the role could be defined as this:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Provide a working example of major documents that a conference needs (budget, volunteer &amp;amp; organizer schedules, sponsorship prospectus, conference schedule)&lt;/li&gt;
&lt;li&gt;Provide perspective when people had questions about how to do something, or worrying about small details that wouldn&amp;#8217;t matter. Focus the group on the right problems.&lt;/li&gt;
&lt;li&gt;Play part-time cheer leader. Reminding people that we were &lt;strong&gt;doing great at something really hard&lt;/strong&gt;, much better than a first-year conference had any right to be doing.&lt;/li&gt;
&lt;li&gt;No major organizational tasks would be assigned to me&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The total time commitment,
outside of attending the actual conference,
was around &lt;strong&gt;25 hours&lt;/strong&gt; over the entire calendar year.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;the-value-provided&quot;&gt;
&lt;h2&gt;The value provided&lt;/h2&gt;
&lt;p&gt;I believe the value in this was on a number a levels.
One of the biggest was really psychological,
I believe it put the other organizers at ease knowing I had done this before.&lt;/p&gt;
&lt;p&gt;The major value that I provided as I see it was:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Having a starting point to work from, instead of creating things from scratch&lt;/li&gt;
&lt;li&gt;Stopping additional work from happening that didn&amp;#8217;t need to happen, based on my previous experience&lt;/li&gt;
&lt;li&gt;Making people feel more confident that we could actually produce the event, making the entire thing possible in the first place&lt;/li&gt;
&lt;li&gt;Reducing the amount of time spent stressing out over things that didn&amp;#8217;t matter in the end&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;examples&quot;&gt;
&lt;h2&gt;Examples&lt;/h2&gt;
&lt;p&gt;I think having a few examples would be useful here to really drive home the value.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;financial-aid&quot;&gt;
&lt;h3&gt;Financial Aid&lt;/h3&gt;
&lt;p&gt;PyCascades was a first year conference.
We were really worried about being inclusive and bringing in a diverse crowd.
It was really hard to figure out how much to budget for financial aid,
because it was dependent on how much sponsorship we got.&lt;/p&gt;
&lt;p&gt;This was a major source of stress for the organizers,
but I tried to provide perspective:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;We&amp;#8217;re a first year conference. Doing &lt;em&gt;any&lt;/em&gt; financial aid is amazing, so we can&amp;#8217;t beat ourselves up over not having &lt;em&gt;enough&lt;/em&gt;!&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;We ended up having a great financial aid program that allowed folks to attend,
but giving perspective really helped people &lt;em&gt;feel good&lt;/em&gt; about what we were doing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;sponsorship&quot;&gt;
&lt;h3&gt;Sponsorship&lt;/h3&gt;
&lt;p&gt;Small conferences are often dependent on sponsorship to be great.
We budgeted tickets to cover the basics like the venue,
but depended on sponsorship for the nicer thing we were able to provide.&lt;/p&gt;
&lt;p&gt;After a couple months of trying to get sponsors,
the other organizers were feeling unsure about the response.
It felt like nobody was going to sponsor and everything would be terrible.
I knew that this was just part of the process and was able to resure folks:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;It takes &lt;em&gt;months&lt;/em&gt; for organizers to process sponsorship applications.
This isn&amp;#8217;t a simple purchase,
but if we keep up the good work we&amp;#8217;re doing,
sponsors will come on board.&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Thanks to the tireless effort of the &lt;a class=&quot;reference external&quot; href=&quot;https://www.pycascades.com/about/organizers/&quot;&gt;entire team&lt;/a&gt;,
we ended up with over 15 sponsors for a first year conference.
But it didn&amp;#8217;t &lt;em&gt;feel&lt;/em&gt; that way from the start,
and I was to show that it would just take time.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;you-should-be-a-mentor&quot;&gt;
&lt;h2&gt;You should be a mentor&lt;/h2&gt;
&lt;p&gt;If you have organized a conference before and have a good grasp on the operations,
you should help mentor another conference.
It&amp;#8217;s one of the highest leverage ways you can spend your time,
if your goal is to help expand a community in the real world.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;next-steps&quot;&gt;
&lt;h2&gt;Next steps&lt;/h2&gt;
&lt;p&gt;I&amp;#8217;d also love to open source the basic documents that I provided to the organizers of PyCascades from my work on Write the Docs.
I think having a shared repository of basic conference starting documents would go a long way to making this a scalable system of organizing conferences,
and allowing mentors to learn from each other over time.
It&amp;#8217;s all the same value that we get from open sourcing code,
but for building a community in real life!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
	<pubDate>Tue, 13 Feb 2018 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Semaphore Community: Testing Python Applications with Pytest</title>
	<guid>https://semaphoreci.com/community/tutorials/testing-python-applications-with-pytest</guid>
	<link>https://semaphoreci.com/community/tutorials/testing-python-applications-with-pytest</link>
	<description>&lt;p&gt;This article is brought with ❤ to you by &lt;a href=&quot;https://semaphoreci.com?utm_source=rss&amp;utm_medium=feed&amp;utm_term=Testing_Python_Applications_with_Pytest&amp;utm_content=toplink&amp;utm_campaign=community&quot;&gt;Semaphore&lt;/a&gt;.&lt;/p&gt;&lt;h3&gt;Introduction&lt;/h3&gt;

&lt;p&gt;Testing applications has become a standard skill set required for any competent developer today.
The Python community embraces testing, and even the Python standard library has
good &lt;a href=&quot;https://docs.python.org/3/library/unittest.html&quot;&gt;inbuilt tools&lt;/a&gt; to support testing.
In the larger Python ecosystem, there are a lot of testing tools. &lt;a href=&quot;http://doc.pytest.org/en/latest/&quot;&gt;Pytest&lt;/a&gt; stands out among them due to its ease of use
and its ability to handle increasingly complex testing needs.&lt;/p&gt;

&lt;p&gt;This tutorial will demonstrate how to write tests for Python code with pytest,
and how to utilize it to cater for a wide range of testing scenarios.&lt;/p&gt;

&lt;h2&gt;Prerequisites&lt;/h2&gt;

&lt;p&gt;This tutorial uses &lt;a href=&quot;https://www.python.org/&quot;&gt;Python 3&lt;/a&gt;, and we will be working inside a &lt;code&gt;virtualenv&lt;/code&gt;.&lt;br /&gt;
Fortunately for us, Python 3 has &lt;a href=&quot;https://docs.python.org/3/library/venv.html&quot;&gt;inbuilt support&lt;/a&gt;
for creating virtual environments.&lt;br /&gt;
To create and activate a virtual environment for this project, let's run the
following commands:&lt;/p&gt;

&lt;div class=&quot;highlight highlight-bash&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir pytest_project
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; pytest_project
python3 -m venv pytest-env
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This creates a virtual environment called &lt;code&gt;pytest-env&lt;/code&gt; in our working directory.&lt;/p&gt;

&lt;p&gt;To begin using the &lt;code&gt;virtualenv&lt;/code&gt;, we need to activate it as follows:&lt;/p&gt;

&lt;div class=&quot;highlight highlight-bash&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; pytest-env/bin/activate
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As long as the &lt;code&gt;virtualenv&lt;/code&gt; is active, any packages we install will be installed
in our virtual environment, rather than in the global Python installation.&lt;/p&gt;

&lt;p&gt;To get started, let's install pytest in our &lt;code&gt;virtualenv&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight highlight-bash&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install pytest
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Basic Pytest Usage&lt;/h2&gt;

&lt;p&gt;We will start with a simple test. Pytest expects our tests to be located in
files whose names begin with &lt;code&gt;test_&lt;/code&gt; or end with &lt;code&gt;_test.py&lt;/code&gt;.
Let's create a file called &lt;code&gt;test_capitalize.py&lt;/code&gt;, and inside it we will write a
function called &lt;code&gt;capital_case&lt;/code&gt; which should take a string as its argument,
and should return a capitalized version of the string.
We will also write a test, &lt;code&gt;test_capital_case&lt;/code&gt; to ensure that the function does what it says.
We prefix our test function names with &lt;code&gt;test_&lt;/code&gt;, since this is what pytest expects
our test functions to be named.&lt;/p&gt;

&lt;div class=&quot;highlight highlight-python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# test_capitalize.py&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;capital_case&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;capitalize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_capital_case&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;capital_case&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'semaphore'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Semaphore'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The immediately noticeable thing is that pytest uses a plain assert statement,
which is much easier to remember and use compared to the numerous &lt;code&gt;assertSomething&lt;/code&gt;
functions found in &lt;code&gt;unittest&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To run the test, execute the &lt;code&gt;pytest&lt;/code&gt; command:&lt;/p&gt;

&lt;div class=&quot;highlight highlight-bash&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pytest
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We should see that our first test passes.&lt;/p&gt;

&lt;p&gt;A keen reader will notice that our function could lead to a bug.
It does not check the type of the argument to ensure that it is a string.
Therefore, if we passed in a number as the argument to the function, it would raise an exception.&lt;/p&gt;

&lt;p&gt;We would like to handle this case in our function by raising a custom exception
with a friendly error message to the user.&lt;/p&gt;

&lt;p&gt;Let's try to capture this in our test:&lt;/p&gt;

&lt;div class=&quot;highlight highlight-python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# test_capitalize.py&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pytest&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_capital_case&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;capital_case&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'semaphore'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Semaphore'&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_raises_exception_on_non_string_arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pytest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;raises&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ne&quot;&gt;TypeError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;capital_case&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The major addition here is the &lt;code&gt;pytest.raises&lt;/code&gt; helper, which asserts that our function
should raise a &lt;code&gt;TypeError&lt;/code&gt; in case the argument passed is not a string.&lt;/p&gt;

&lt;p&gt;Running the tests at this point should fail with the following error:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def capital_case(x):
&amp;gt;       return x.capitalize()
E       AttributeError: 'int' object has no attribute 'capitalize'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since we've verified that we have not handled such a case, we can go ahead and fix it.&lt;/p&gt;

&lt;p&gt;In our &lt;code&gt;capital_case&lt;/code&gt; function, we should check that the argument passed is a
string or a string subclass before calling the &lt;code&gt;capitalize&lt;/code&gt; function. If it is not,
we should raise a &lt;code&gt;TypeError&lt;/code&gt; with a custom error message.&lt;/p&gt;

&lt;div class=&quot;highlight highlight-python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# test_capitalize.py&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;capital_case&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;isinstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;TypeError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Please provide a string argument'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;capitalize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When we rerun our tests, they should be passing once again.&lt;/p&gt;

&lt;h2&gt;Using Pytest Fixtures&lt;/h2&gt;

&lt;p&gt;In the following sections, we will explore some more advanced pytest features.
To do this, we will need a small project to work with.&lt;/p&gt;

&lt;p&gt;We will be writing a &lt;code&gt;wallet&lt;/code&gt; application that enables its users to add or spend
money in the wallet. It will be modeled as a class with two instance methods:
&lt;code&gt;spend_cash&lt;/code&gt; and &lt;code&gt;add_cash&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We'll get started by writing our tests first. Create a file called &lt;code&gt;test_wallet.py&lt;/code&gt;
in the working directory, and add the following contents:&lt;/p&gt;

&lt;div class=&quot;highlight highlight-python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# test_wallet.py&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pytest&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;wallet&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Wallet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InsufficientAmount&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_default_initial_amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;wallet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Wallet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wallet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;balance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_setting_initial_amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;wallet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Wallet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wallet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;balance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_wallet_add_cash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;wallet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Wallet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;wallet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_cash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;90&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wallet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;balance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_wallet_spend_cash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;wallet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Wallet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;wallet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spend_cash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wallet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;balance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_wallet_spend_cash_raises_exception_on_insufficient_amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;wallet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Wallet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pytest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;raises&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InsufficientAmount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;wallet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spend_cash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;First things first, we import the &lt;code&gt;Wallet&lt;/code&gt; class and the &lt;code&gt;InsufficientAmount&lt;/code&gt;
exception that we expect to raise when the user tries to spend more cash than
they have in their wallet.&lt;/p&gt;

&lt;p&gt;When we initialize the &lt;code&gt;Wallet&lt;/code&gt; class, we expect it to have a default balance of &lt;code&gt;0&lt;/code&gt;.
However, when we initialize the class with a value, that value should
be set as the wallet's initial balance.&lt;/p&gt;

&lt;p&gt;Moving on to the methods we plan to implement, we test that the &lt;code&gt;add_cash&lt;/code&gt; method
correctly increments the balance with the added amount. On the other hand, we are
also ensuring that the &lt;code&gt;spend_cash&lt;/code&gt; method reduces the balance by the spent amount,
and that we can't spend more cash than we have in the wallet.
If we try to do so, an &lt;code&gt;InsufficientAmount&lt;/code&gt; exception should be raised.&lt;/p&gt;

&lt;p&gt;Running the tests at this point should fail, since we have not created our &lt;code&gt;Wallet&lt;/code&gt; class yet.
We'll proceed with creating it. Create a file called &lt;code&gt;wallet.py&lt;/code&gt;, and we will add our &lt;code&gt;Wallet&lt;/code&gt; implementation in it. The file should look as follows:&lt;/p&gt;

&lt;div class=&quot;highlight highlight-python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# wallet.py&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InsufficientAmount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ne&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Wallet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;fm&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initial_amount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;balance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initial_amount&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;spend_cash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;balance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InsufficientAmount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Not enough available to spend {}'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;balance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add_cash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;balance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;First of all, we define our custom exception, &lt;code&gt;InsufficientAmount&lt;/code&gt;, which will be
raised when we try to spend more money than we have in the wallet.
The &lt;code&gt;Wallet&lt;/code&gt; class then follows. The constructor accepts an initial amount, which
defaults to &lt;code&gt;0&lt;/code&gt; if not provided. The initial amount is then set as the balance.&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;spend_cash&lt;/code&gt; method, we first check that we have a sufficient balance.
If the balance is lower than the amount we intend to spend, we raise the
&lt;code&gt;InsufficientAmount&lt;/code&gt; exception with a friendly error message.&lt;/p&gt;

&lt;p&gt;The implementation of &lt;code&gt;add_cash&lt;/code&gt; then follows, which simply adds the provided amount to
the current wallet balance.&lt;/p&gt;

&lt;p&gt;Once we have this in place, we can rerun our tests, and they should be passing.&lt;/p&gt;

&lt;div class=&quot;highlight highlight-sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pytest -q test_wallet.py

.....
&lt;span class=&quot;m&quot;&gt;5&lt;/span&gt; passed in &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;.01 seconds
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Refactoring our Tests with Fixtures&lt;/h2&gt;

&lt;p&gt;You may have noticed some repetition in the way we
initialized the class in each test.
This is where &lt;a href=&quot;http://doc.pytest.org/en/latest/fixture.html&quot;&gt;pytest fixtures&lt;/a&gt; come in.
They help us set up some helper code that should run before any tests are executed,
and are perfect for setting up resources that are needed by the tests.&lt;/p&gt;

&lt;p&gt;Fixture functions are created by marking them with the &lt;code&gt;@pytest.fixture&lt;/code&gt; decorator.
Test functions that require fixtures should accept them as arguments. For example,
for a test to receive a fixture called &lt;code&gt;wallet&lt;/code&gt;, it should have an argument with
the fixture name, i.e. &lt;code&gt;wallet&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let's see how this works in practice. We will refactor our previous tests to use
test fixtures where appropriate.&lt;/p&gt;

&lt;div class=&quot;highlight highlight-python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# test_wallet.py&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pytest&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;wallet&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Wallet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InsufficientAmount&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@pytest.fixture&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;empty_wallet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;'''Returns a Wallet instance with a zero balance'''&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Wallet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@pytest.fixture&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;wallet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;'''Returns a Wallet instance with a balance of 20'''&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Wallet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_default_initial_amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;empty_wallet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;empty_wallet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;balance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_setting_initial_amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wallet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wallet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;balance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_wallet_add_cash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wallet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;wallet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_cash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wallet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;balance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_wallet_spend_cash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wallet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;wallet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spend_cash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wallet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;balance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_wallet_spend_cash_raises_exception_on_insufficient_amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;empty_wallet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pytest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;raises&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InsufficientAmount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;empty_wallet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spend_cash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In our refactored tests, we can see that we have reduced the amount of boilerplate
code by making use of fixtures.&lt;/p&gt;

&lt;p&gt;We define two fixture functions,&lt;code&gt;wallet&lt;/code&gt; and &lt;code&gt;empty_wallet&lt;/code&gt;, which will be
responsible for initializing the &lt;code&gt;Wallet&lt;/code&gt; class in tests where it is needed,
with different values.&lt;/p&gt;

&lt;p&gt;For the first test function, we make use of the &lt;code&gt;empty_wallet&lt;/code&gt; fixture,
which provided a wallet instance with a balance of &lt;code&gt;0&lt;/code&gt; to the test.&lt;br /&gt;
The next three tests receive a wallet instance initialized with a balance of &lt;code&gt;20&lt;/code&gt;.
Finally, the last test receives the &lt;code&gt;empty_wallet&lt;/code&gt; fixture.
The tests can then make use of the fixture as if it was created inside the test
function, as in the tests we had before.&lt;/p&gt;

&lt;p&gt;Rerun the tests to confirm that everything works.&lt;/p&gt;

&lt;p&gt;Utilizing fixtures helps us de-duplicate our code. If you notice a case where a
piece of code is used repeatedly in a number of tests, that might be a good candidate
to use as a fixture.&lt;/p&gt;

&lt;h2&gt;Some Pointers on Test Fixtures&lt;/h2&gt;

&lt;p&gt;Here are some pointers on using test fixtures:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Each test is provided with a newly-initialized &lt;code&gt;Wallet&lt;/code&gt; instance, and not one that
has been used in another test.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It is a good practice to add docstrings for your fixtures.
To see all the available fixtures, run the following command:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight highlight-sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pytest --fixtures
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This lists out some inbuilt pytest fixtures, as well as our custom fixtures.
The docstrings will appear as the descriptions of the fixtures.&lt;/p&gt;

&lt;div class=&quot;highlight highlight-sh&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wallet
    Returns a Wallet instance with a balance of &lt;span class=&quot;m&quot;&gt;20&lt;/span&gt;
empty_wallet
    Returns a Wallet instance with a zero balance
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Parametrized Test Functions&lt;/h2&gt;

&lt;p&gt;Having tested the individual methods in the &lt;code&gt;Wallet&lt;/code&gt; class, the next step we should
take is to test various combinations of these methods.
This is to answer questions such as &quot;If I have an initial balance of &lt;code&gt;30&lt;/code&gt;, and spend
&lt;code&gt;20&lt;/code&gt;, then add &lt;code&gt;100&lt;/code&gt;, and later on spend &lt;code&gt;50&lt;/code&gt;, how much should the balance be?&quot;&lt;/p&gt;

&lt;p&gt;As you can imagine, writing out those steps in the tests would be tedious, and
pytest provides quite a delightful solution: &lt;a href=&quot;http://doc.pytest.org/en/latest/parametrize.html#pytest-mark-parametrize-parametrizing-test-functions&quot;&gt;Parametrized test functions&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To capture a scenario like the one above, we can write a test:&lt;/p&gt;

&lt;div class=&quot;highlight highlight-python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# test_wallet.py&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@pytest.mark.parametrize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;earned,spent,expected&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_transactions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;earned&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;my_wallet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Wallet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;my_wallet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_cash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;earned&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;my_wallet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spend_cash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_wallet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;balance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expected&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This enables us to test different scenarios, all in one function.
We make use of the &lt;code&gt;@pytest.mark.parametrize&lt;/code&gt; decorator, where we can specify the names
of the arguments that will be passed to the test function, and a list of arguments
corresponding to the names.&lt;/p&gt;

&lt;p&gt;The test function marked with the decorator will then be run once for each set of parameters.&lt;/p&gt;

&lt;p&gt;For example, the test will be run the first time with the &lt;code&gt;earned&lt;/code&gt; parameter set to
30, &lt;code&gt;spent&lt;/code&gt; set to &lt;code&gt;10&lt;/code&gt;, and &lt;code&gt;expected&lt;/code&gt; set to &lt;code&gt;20&lt;/code&gt;.
The second time the test is run, the parameters will take the second set of arguments.
We can then use these parameters in our test function.&lt;/p&gt;

&lt;p&gt;This elegantly helps us capture the scenario:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;My wallet initially has &lt;code&gt;0&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;I add &lt;code&gt;30&lt;/code&gt; units of cash to the wallet,&lt;/li&gt;
&lt;li&gt;I spend &lt;code&gt;10&lt;/code&gt; units of cash, and&lt;/li&gt;
&lt;li&gt;I should have &lt;code&gt;20&lt;/code&gt; units of cash remaining after the two transactions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is quite a succinct way to test different combinations of values without writing a lot
of repeated code.&lt;/p&gt;

&lt;h2&gt;Combining Test Fixtures and Parametrized Test Functions&lt;/h2&gt;

&lt;p&gt;To make our tests less repetitive, we can go further and combine test fixtures
and parametrize test functions.
To demonstrate this, let's replace the wallet initialization code with a test fixture
as we did before. The end result will be:&lt;/p&gt;

&lt;div class=&quot;highlight highlight-python&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# test_wallet.py&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@pytest.fixture&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;my_wallet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;'''Returns a Wallet instance with a zero balance'''&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Wallet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@pytest.mark.parametrize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;earned,spent,expected&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_transactions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;my_wallet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;earned&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;my_wallet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_cash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;earned&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;my_wallet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spend_cash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_wallet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;balance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expected&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We will create a new fixture called &lt;code&gt;my_wallet&lt;/code&gt; that is exactly the same as the
&lt;code&gt;empty_wallet&lt;/code&gt; fixture we used before. It returns a wallet instance with a balance of &lt;code&gt;0&lt;/code&gt;.
To use both the fixture and the parametrized functions in the test, we include the
fixture as the first argument, and the parameters as the rest of the arguments.&lt;/p&gt;

&lt;p&gt;The transactions will then be performed on the wallet instance provided by the fixture.&lt;/p&gt;

&lt;p&gt;You can try out this pattern further, e.g. with the wallet instance
with a non-empty balance and with other different combinations of the &lt;code&gt;earned&lt;/code&gt; and
&lt;code&gt;spent&lt;/code&gt; amounts.&lt;/p&gt;

&lt;h2&gt;Continuous Testing on Semaphore CI&lt;/h2&gt;

&lt;p&gt;Next, let's add continuous testing to our application using
&lt;a href=&quot;https://semaphoreci.com/&quot;&gt;SemaphoreCI&lt;/a&gt; to ensure that we don't break our code
when we make new changes.&lt;/p&gt;

&lt;p&gt;Make sure you've committed everything on Git, and push your repository to GitHub
or Bitbucket, which will enable Semaphore to fetch your code. Next, &lt;a href=&quot;https://semaphoreci.com/users/sign_up?from=community-tutorial&amp;referer=getting-started-testing-python-applications-with-pytest&quot;&gt;sign up for a free Semaphore account&lt;/a&gt;, if you don't have one already.
Once you've confirmed your email, it's time to create a new project.&lt;/p&gt;

&lt;p&gt;Follow these steps to add the project to Semaphore:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Once you're logged into Semaphore, navigate to your list of projects and click the &quot;Add New Project&quot; button:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d2l3jyjp24noqc.cloudfront.net/uploads/image/img/532/Add_New_Project_Screen.png&quot; alt=&quot;Add New Project Screen&quot; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Next, select the account where you wish to add the new project.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d2l3jyjp24noqc.cloudfront.net/uploads/image/img/533/Select_Account_Screen.png&quot; alt=&quot;Select Account Screen&quot; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select the repository that holds the code you'd like to build:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d2l3jyjp24noqc.cloudfront.net/uploads/image/img/534/Select_Repository_Screen.png&quot; alt=&quot;Select Repository Screen&quot; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select the branch you would like to build. The &lt;code&gt;master&lt;/code&gt; branch is the default.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d2l3jyjp24noqc.cloudfront.net/uploads/image/img/535/Select_branch.png&quot; alt=&quot;Select branch&quot; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Configure your project as shown below:&lt;br /&gt;
&lt;img src=&quot;https://d2l3jyjp24noqc.cloudfront.net/uploads/image/img/536/Project_Configuration.png&quot; alt=&quot;Project Configuration&quot; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Once your build has run, you should see a successful build that should look
 something like this:
&lt;img src=&quot;https://d2l3jyjp24noqc.cloudfront.net/uploads/image/img/537/Successful_Build.png&quot; alt=&quot;Successful Build&quot; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In a few simple steps, we've set up continuous testing.&lt;/p&gt;

&lt;h3&gt;Summary&lt;/h3&gt;

&lt;p&gt;We hope that this article has given you a solid introduction to pytest,
which is one of the most popular testing tools in the Python ecosystem.
It's extremely easy to get started with using it, and it can handle most of what
you need from a testing tool.&lt;/p&gt;

&lt;p&gt;You can check out the complete code on &lt;a href=&quot;https://github.com/kevgathuku/pytest-intro&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Please reach out with any questions or feedback you may have in the comments
section below.&lt;/p&gt;&lt;p&gt;This article is brought with ❤ to you by &lt;a href=&quot;https://semaphoreci.com?utm_source=rss&amp;utm_medium=feed&amp;utm_term=Testing_Python_Applications_with_Pytest&amp;utm_content=bottomlink&amp;utm_campaign=community&quot;&gt;Semaphore&lt;/a&gt;.&lt;/p&gt;</description>
	<pubDate>Mon, 12 Feb 2018 18:53:16 +0000</pubDate>
</item>
<item>
	<title>Mike Driscoll: ReportLab Book Cover Story</title>
	<guid>http://www.blog.pythonlibrary.org/2018/02/12/reportlab-book-cover-story/</guid>
	<link>http://www.blog.pythonlibrary.org/2018/02/12/reportlab-book-cover-story/</link>
	<description>&lt;div class=&quot;pf-content&quot;&gt;&lt;p&gt;I really like coming up with fun covers for my books. I also like to find new artists for each book so that they all end up looking unique. I do plan to re-use one or two artists at some point though.&lt;/p&gt;
&lt;p&gt;Anyway, for the ReportLab book I happened to stumble across Therese Larsson&amp;#8217;s &lt;a href=&quot;http://%20http//www.sillybeastillustration.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;website&lt;/a&gt; and I really liked how she did her lighting in her artwork. She is from Sweden and has worked with some fairly big companies, including Disney, Google, and Adidas. You can read more about her on &lt;a href=&quot;https://www.behance.net/sillybeast&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Behance&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I ended up commissioning the cover from her and I described what I wanted. Here is the initial sketch:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.blog.pythonlibrary.org/wp-content/uploads/2018/02/pythoncover-213x300.jpg&quot; alt=&quot;&quot; width=&quot;213&quot; height=&quot;300&quot; class=&quot;size-medium wp-image-7130&quot; /&gt;ReportLab Cover Sketch&lt;br /&gt;
&lt;span id=&quot;more-7129&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;I thought this was a pretty good version of my vision, so I approved the concept. The next work in progress version of the cover looked like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.blog.pythonlibrary.org/wp-content/uploads/2018/02/pythoncover_wip-214x300.jpg&quot; alt=&quot;&quot; width=&quot;214&quot; height=&quot;300&quot; class=&quot;aligncenter size-medium wp-image-7132&quot; /&gt;&lt;/p&gt;
&lt;p&gt;While still a bit rough, I really liked how it was coming along and you can tell the lighting is neat even in this early version of the cover. &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.blog.pythonlibrary.org/wp-content/uploads/2018/02/pythoncover_wip2-214x300.jpg&quot; alt=&quot;&quot; width=&quot;214&quot; height=&quot;300&quot; class=&quot;aligncenter size-medium wp-image-7133&quot; /&gt;&lt;/p&gt;
&lt;p&gt;In this version, we have the main characters mostly done and the scene is pretty well put together too.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.blog.pythonlibrary.org/wp-content/uploads/2018/02/pythoncover_wip3-214x300.jpg&quot; alt=&quot;&quot; width=&quot;214&quot; height=&quot;300&quot; class=&quot;aligncenter size-medium wp-image-7134&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Here we get a lot more detail added to our main characters and a background mouse is added too.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.blog.pythonlibrary.org/wp-content/uploads/2018/02/pythoncover_FINAL-214x300.jpg&quot; alt=&quot;&quot; width=&quot;214&quot; height=&quot;300&quot; class=&quot;aligncenter size-medium wp-image-7131&quot; /&gt;&lt;/p&gt;
&lt;p&gt;And here is the final version of the cover (without the title). I still really like how the cover came out. I can&amp;#8217;t wait to see it in print!&lt;/p&gt;
&lt;p&gt;If you&amp;#8217;d like to support the development of the book, check out the &lt;a href=&quot;https://www.kickstarter.com/projects/34257246/reportlab-pdf-processing-with-python&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Kickstarter&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;&lt;p&gt;&lt;a class=&quot;a2a_button_facebook&quot; href=&quot;https://www.addtoany.com/add_to/facebook?linkurl=http%3A%2F%2Fwww.blog.pythonlibrary.org%2F2018%2F02%2F12%2Freportlab-book-cover-story%2F&amp;linkname=ReportLab%20Book%20Cover%20Story&quot; title=&quot;Facebook&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;&lt;a class=&quot;a2a_button_twitter&quot; href=&quot;https://www.addtoany.com/add_to/twitter?linkurl=http%3A%2F%2Fwww.blog.pythonlibrary.org%2F2018%2F02%2F12%2Freportlab-book-cover-story%2F&amp;linkname=ReportLab%20Book%20Cover%20Story&quot; title=&quot;Twitter&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;&lt;a class=&quot;a2a_button_google_plus&quot; href=&quot;https://www.addtoany.com/add_to/google_plus?linkurl=http%3A%2F%2Fwww.blog.pythonlibrary.org%2F2018%2F02%2F12%2Freportlab-book-cover-story%2F&amp;linkname=ReportLab%20Book%20Cover%20Story&quot; title=&quot;Google+&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;&lt;a class=&quot;a2a_dd addtoany_share_save addtoany_share&quot; href=&quot;https://www.addtoany.com/share#url=http%3A%2F%2Fwww.blog.pythonlibrary.org%2F2018%2F02%2F12%2Freportlab-book-cover-story%2F&amp;title=ReportLab%20Book%20Cover%20Story&quot;&gt;&lt;/a&gt;&lt;/p&gt;</description>
	<pubDate>Mon, 12 Feb 2018 18:15:00 +0000</pubDate>
</item>
<item>
	<title>Stack Abuse: Phonetic Similarity of Words: A Vectorized Approach in Python</title>
	<guid>http://stackabuse.com/phonetic-similarity-of-words-a-vectorized-approach-in-python/</guid>
	<link>http://stackabuse.com/phonetic-similarity-of-words-a-vectorized-approach-in-python/</link>
	<description>&lt;p&gt;In an &lt;a href=&quot;http://stackabuse.com/levenshtein-distance-and-text-similarity-in-python/&quot;&gt;earlier article&lt;/a&gt; I gave you an introduction into phonetic algorithms, and shows their variety. In more detail we had a look at the edit distance, which is also known as the &lt;a rel=&quot;nofollow&quot; target=&quot;_blank&quot; href=&quot;https://en.wikipedia.org/wiki/Levenshtein_distance&quot;&gt;Levenshtein Distance&lt;/a&gt;. This algorithm was developed in order to calculate the number of letter substitutions to get from one word to the next.&lt;/p&gt;

&lt;p&gt;As you may have already noted in the previous article, there are different methods to calculate the sound of a word like Soundex, Metaphone, and the Match Rating codex. Some of them are more common than others. As an example, an implementation of Soundex is part of every programming language as well as Database Management Systems (DBMS) like Oracle, MySQL, and PostgreSQL. In contrast both Metaphone and the Match Rating codex are rarely used, and in most cases require additional software libraries to be installed on your system. &lt;/p&gt;

&lt;p&gt;Seen as a proposal, this article demonstrates how to combine different phonetic algorithms in a vectorized approach, and to use their peculiarities in order to achieve a better comparison result than using the single algorithms separately. To implement this, the Python-based library named &lt;a rel=&quot;nofollow&quot; target=&quot;_blank&quot; href=&quot;http://advas.sf.net/&quot;&gt;AdvaS Advanced Search on SourceForge&lt;/a&gt; comes into play. AdvaS already includes a method in order to calculate several phonetic codes for a word in a single step.&lt;/p&gt;

&lt;h3 id=&quot;phoneticalgorithmsexplained&quot;&gt;Phonetic Algorithms Explained&lt;/h3&gt;

&lt;p&gt;To be more precise, each of these algorithms creates a specific phonetic representation of a single word. Usually, such a representation is either a fixed-length, or a variable-length string that consists of only letters, or a combination of both letters and digits. The detailed structure of the representation depends on the algorithm. Actually, if two representations - calculated using the same algorithm - are similar the two original words are pronounced in the same way no matter how they are written. In reality, this helps to detect similar-sounding words even if they are spelt differently - no matter if done on purpose, or by accident.&lt;/p&gt;

&lt;p&gt;Each of these algorithms were designed with a certain language or purpose in mind, and do not fit in each others languages in exactly the same way. Keep in mind that the representations are not always optimal but intended to fit as close as possible. As an example, the original Soundex algorithm focuses on the English language, whereas the Kölner Phonetik focuses on the German language, which contains umlauts, and other special characters like an &quot;ß&quot;.&lt;/p&gt;

&lt;p&gt;Next, we will have a short look at a selection of phonetic algorithms. For a more detailed description follow the links given below. Be warned that the level of documentation of the algorithms is quite different - from very detailed to quite sparse.&lt;/p&gt;

&lt;h4 id=&quot;soundex&quot;&gt;Soundex&lt;/h4&gt;

&lt;p&gt;The resulting representation from the Soundex algorithm is a four letter word. This is based on a character followed by three numerical digits. As an example, the Soundex value of &quot;Knuth&quot; is K530 which is similar to &quot;Kant&quot;. This simplicity leads to quite a few misleading representations. Although, in general the results are quite good. Originally designed for American English, Soundex is today available in different language-specific versions like &lt;a rel=&quot;nofollow&quot; target=&quot;_blank&quot; href=&quot;https://yomguithereal.github.io/talisman/phonetics/french&quot;&gt;French&lt;/a&gt;, German, and Hebrew.&lt;/p&gt;

&lt;p&gt;Developed by Robert C. Russell and Margaret King Odell at the beginning of the 20th century, Soundex was designed with the English language in mind. It was widely used to detect similar-sounding family names as part of the US census in the 1930s.&lt;/p&gt;

&lt;h4 id=&quot;metaphone&quot;&gt;Metaphone&lt;/h4&gt;

&lt;p&gt;Developed by Lawrence Phillips in 1990, &lt;a rel=&quot;nofollow&quot; target=&quot;_blank&quot; href=&quot;https://en.wikipedia.org/wiki/Metaphone&quot;&gt;Metaphone&lt;/a&gt; was also designed with the English language in mind. He tried to improve the Soundex mechanism by using information on variations and inconsistencies in English spelling/pronunciation to produce more accurate encodings. As a result the phonetic representation is a variable-length word based on the 16 consonants &quot;0BFHJKLMNPRSTWXY&quot;. The 5 vowels &quot;AEIOU&quot; are allowed, too, but only at the beginning of the representation.&lt;/p&gt;

&lt;p&gt;The original description of the Metaphone algorithm was rather inexact and led to the development of both Double Metaphone and Metaphone 3. The latter one can correct thousands of miscodings that are be produced by the first two versions. Metaphone 3 is available as a commercial software and supports both German and Spanish pronunciation.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Figure 1&lt;/em&gt; below is a screenshot taken from a &lt;a rel=&quot;nofollow&quot; target=&quot;_blank&quot; href=&quot;https://www.genealogieonline.nl/de/naslag/phonetic/&quot;&gt;Dutch genealogy website&lt;/a&gt;, and shows the different representations for Soundex, Metaphone, and Double Metaphone for the name &quot;Knuth&quot;. Also, the figure displays a selection of words that are represented in the same way and have the same phonetic code (&quot;Gleiche Kodierung wie&quot;). The more distinctive the algorithm the less number of words with the same phonetic code is best.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;img-responsive&quot; alt=&quot;Soundex, Metaphone, and Double Metaphone representations&quot; src=&quot;https://s3.amazonaws.com/stackabuse/media/phonetic-similarity-words-vectorized-approach-python-1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Figure 1&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The Metaphone algorithm is a standard part of only a few programming languages, for example &lt;a rel=&quot;nofollow&quot; target=&quot;_blank&quot; href=&quot;http://php.net/manual/en/function.metaphone.php&quot;&gt;PHP&lt;/a&gt;. For Python, both Metaphone and Double Metaphone are part of the &lt;a rel=&quot;nofollow&quot; target=&quot;_blank&quot; href=&quot;https://pypi.python.org/pypi/phonetics&quot;&gt;Phonetics package&lt;/a&gt;. Commercial implementations are available for the programming languages C++, C#, Java, Python, and Ruby.&lt;/p&gt;

&lt;h4 id=&quot;caverphone&quot;&gt;Caverphone&lt;/h4&gt;

&lt;p&gt;The &lt;a rel=&quot;nofollow&quot; target=&quot;_blank&quot; href=&quot;https://en.wikipedia.org/wiki/Caverphone&quot;&gt;Caverphone&lt;/a&gt; algorithm was created by David Hood in 2002. A revised version was released in 2004. The project environment is the &lt;a rel=&quot;nofollow&quot; target=&quot;_blank&quot; href=&quot;http://caversham.otago.ac.nz/about/project.php&quot;&gt;Caversham Project&lt;/a&gt; at the University of Otago, New Zealand. The background for the algorithm was to assist with matching electoral rolls data between late 19th century and early 20th century, where names only needed to be in a 'commonly recognizable form'. The algorithm is named after the municipality the university is located, and optimized for language-specific letter combinations where the research of the names took place.&lt;/p&gt;

&lt;p&gt;By default, a Caverphone representation consists of six characters and numbers. Some implementations allow to extend the length up to ten characters and numbers. As an example, &quot;Thompson&quot; is transformed into the code &quot;TMPSN1&quot;. Currently, the algorithm is available for C#, Python (revised version), Java (both the original and revised version), and R.&lt;/p&gt;

&lt;h4 id=&quot;newyorkstateidentificationandintelligencesystem&quot;&gt;New York State Identification and Intelligence System&lt;/h4&gt;

&lt;p&gt;This algorithm was developed in the 1970s as part of the &lt;a rel=&quot;nofollow&quot; target=&quot;_blank&quot; href=&quot;https://en.wikipedia.org/wiki/New_York_State_Identification_and_Intelligence_System&quot;&gt;New York State Identification and Intelligence System&lt;/a&gt; (NYSIIS). Still in use today its quality is said to be close to the Soundex algorithm.&lt;/p&gt;

&lt;p&gt;The design was optimized to match specifically with American names. So, the two names &quot;Webberley&quot; and &quot;Wibberley&quot; are represented by the phonetic code &quot;WABARLY&quot;.&lt;/p&gt;

&lt;h4 id=&quot;klnerphonetik&quot;&gt;Kölner Phonetik&lt;/h4&gt;

&lt;p&gt;Based on the Soundex algorithm, in 1969 Hans Joachim Postel developed the &lt;a rel=&quot;nofollow&quot; target=&quot;_blank&quot; href=&quot;https://en.wikipedia.org/wiki/Cologne_phonetics&quot;&gt;Kölner Phonetik&lt;/a&gt;. It is targeted towards the German language, and later became part of the SAP systems. The phonetic representation is just a variable-length string of digits.&lt;/p&gt;

&lt;p&gt;Currently, implementations in Perl, PHP, and JavaScript are known.&lt;/p&gt;

&lt;h4 id=&quot;matchratingapproach&quot;&gt;Match Rating Approach&lt;/h4&gt;

&lt;p&gt;The &lt;a rel=&quot;nofollow&quot; target=&quot;_blank&quot; href=&quot;https://en.wikipedia.org/wiki/Match_rating_approach&quot;&gt;Match rating approach&lt;/a&gt; (MRA) codex was developed in 1977 by Western Airlines. The idea was to detect homophonous names on passenger lists with a strong focus on the English language. As an example, the representation for &quot;Smith&quot; is &quot;SMTH&quot;, whereas &quot;Smyth&quot; is encoded by &quot;SMYTH&quot;.&lt;/p&gt;

&lt;p&gt;Currently, MRA is available as a &lt;a rel=&quot;nofollow&quot; target=&quot;_blank&quot; href=&quot;https://archive.codeplex.com/?p=sounditout&quot;&gt;C# implementation&lt;/a&gt; from an archived website, and as a Python method in the &lt;a rel=&quot;nofollow&quot; target=&quot;_blank&quot; href=&quot;https://pypi.python.org/pypi/jellyfish&quot;&gt;Jellyfish module&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;implementation&quot;&gt;Implementation&lt;/h3&gt;

&lt;p&gt;The calculation of the degree of similarity is based on three vectors denominated as &lt;code&gt;codeList1&lt;/code&gt;, &lt;code&gt;codeList2&lt;/code&gt;, and &lt;code&gt;weight&lt;/code&gt; in the source code listing below. In Python a vector can be implemented as an array, for example using the &lt;a rel=&quot;nofollow&quot; target=&quot;_blank&quot; href=&quot;http://www.numpy.org/&quot;&gt;NumPy&lt;/a&gt; package. Vector number one and two represent the phonetic code for the two different words. Vector number three represents the specific algorithm weight, and contains a fractional value between 0 and 1 in order to describe that weight. The total of the single values of vector three is the exact value of 1, and should neither be lower or higher than that. In case this happens the single values of vector three have to be normalized beforehand.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Figure 2&lt;/em&gt; displays the three vectors.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;img-responsive&quot; alt=&quot;Phonetic algorithm vectors&quot; src=&quot;https://s3.amazonaws.com/stackabuse/media/phonetic-similarity-words-vectorized-approach-python-2.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Figure 2&lt;/em&gt; Three vectors used to keep the data&lt;/p&gt;

&lt;p&gt;The calculated degree of similarity between the two words is a decimal value based on a calculation per phonetic algorithm (subtotal). Each subtotal is the product of the Levenshtein distance between the specific phonetic representation of &lt;code&gt;codeList1&lt;/code&gt; and &lt;code&gt;codeList2&lt;/code&gt;, and the according weight for the specific phonetic algorithm. For NYSIIS, it is calculated as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;nysiis = Levenshtein(codeList1[&quot;nysiis&quot;], codeList2[&quot;nysiis&quot;]) * weight[&quot;nysiis&quot;]  
       = Levenshtein(&quot;Knatt&quot;, &quot;Kand&quot;) * 0.1
       = 3 * 0.1
       = 0.3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As described in the previous article, Levenshtein distance returns the number of edits required to come from one word to the next. In our case the two words are phonetic codes that are calculated per algorithm. The lower the number of changes (edits) between the codes the higher the level of phonetic similarity between the original words as seen from the point of view of the algorithm.&lt;/p&gt;

&lt;p&gt;The Python code below uses the Phonetics class from the AdvaS module, as well as the NumPy module. The definition of the Levenshtein function is similar to the earlier article on &lt;a href=&quot;http://stackabuse.com/levenshtein-distance-and-text-similarity-in-python/&quot;&gt;Levenshtein distance&lt;/a&gt;, and just included for completeness. Next, the three vectors are initialized as shown in &lt;em&gt;Figure 2&lt;/em&gt;, the subtotals are calculated in a loop, and the total is printed to stdout.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;# -*- coding: utf-8 -*-

from phonetics import Phonetics  
import numpy as np

def levenshtein(seq1, seq2):  
    size_x = len(seq1) + 1
    size_y = len(seq2) + 1
    matrix = np.zeros ((size_x, size_y))
    for x in xrange(size_x):
        matrix [x, 0] = x
    for y in xrange(size_y):
        matrix [0, y] = y

    for x in xrange(1, size_x):
        for y in xrange(1, size_y):
            if seq1[x-1] == seq2[y-1]:
                matrix [x,y] = min(
                    matrix[x-1, y] + 1,
                    matrix[x-1, y-1],
                    matrix[x, y-1] + 1
                )
            else:
                matrix [x,y] = min(
                    matrix[x-1,y] + 1,
                    matrix[x-1,y-1] + 1,
                    matrix[x,y-1] + 1
                )
    return (matrix[size_x - 1, size_y - 1])

# -- initialize phonetics object

word1 = Phonetics(&quot;Knuth&quot;)  
word2 = Phonetics(&quot;Kant&quot;)  
print (&quot;Comparing %s with %s&quot; % (word1.getText(), word2.getText()))

# -- phonetic code
codeList1 = word1.phoneticCode()  
codeList2 = word2.phoneticCode()

# -- weight
weight = {  
    &quot;soundex&quot;: 0.2,
    &quot;caverphone&quot;: 0.2,
    &quot;metaphone&quot;: 0.5,
    &quot;nysiis&quot;: 0.1
}

# -- algorithms
algorithms = [&quot;soundex&quot;, &quot;caverphone&quot;, &quot;metaphone&quot;, &quot;nysiis&quot;]

# -- total
total = 0.0  
for entry in algorithms:  
    code1 = codeList1[entry]
    code2 = codeList2[entry]
    lev = levenshtein (code1, code2)
    currentWeight = weight[entry]
    print (&quot;comparing %s with %s for %s (%0.2f: weight %0.2f)&quot; % (code1, code2, entry, lev, currentWeight))
    subtotal = lev * currentWeight
    total += subtotal

print (&quot;total: %0.2f&quot; % total)  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Assuming the source code is stored in the file phonetics-vector.py the output is as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;$ python phonetics-vector.py
Comparing Knuth with Kant  
comparing K530 with K530 for soundex (0.00: weight 0.20)  
comparing KNT1111111 with KNT1111111 for caverphone (0.00: weight 0.20)  
comparing n0h with nt for metaphone (2.00: weight 0.50)  
comparing Knatt with Kand for nysiis (3.00: weight 0.20)  
total: 1.60  
$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The smaller the degree of similarity the more identical are the two words in terms of pronunciation. As demonstrated in the example above &quot;Knuth&quot; and &quot;Kant&quot; the calculated value is 1.6, and quite low. &lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;The approach explained here helps to find a solution to balance the peculiarities of the different phonetic methods. So far, the first result is promising but may not be optimal yet. The weight vector is used to regulate the influence of each specific phonetic algorithm. Further research is required to find the appropriate weight value distribution per language. Also, the list of algorithms that are taken into account can be easily extended.&lt;/p&gt;

&lt;h3 id=&quot;acknowledgements&quot;&gt;Acknowledgements&lt;/h3&gt;

&lt;p&gt;The author would like to thank &lt;a rel=&quot;nofollow&quot; target=&quot;_blank&quot; href=&quot;https://geneva-observer.blogspot.de/&quot;&gt;Gerold Rupprecht&lt;/a&gt; and &lt;a rel=&quot;nofollow&quot; target=&quot;_blank&quot; href=&quot;http://www.upsurgesa.co.za/&quot;&gt;Zoleka Hatitongwe&lt;/a&gt; for their support while preparing the article.&lt;/p&gt;</description>
	<pubDate>Mon, 12 Feb 2018 16:16:47 +0000</pubDate>
</item>
<item>
	<title>Codementor: Deploying a Flask application to AWS</title>
	<guid>https://www.codementor.io/dushyantbgs/deploying-a-flask-application-to-aws-gnva38cf0</guid>
	<link>https://www.codementor.io/dushyantbgs/deploying-a-flask-application-to-aws-gnva38cf0</link>
	<description>Basic steps to deploy a flask application on AWS EC2 instance.</description>
	<pubDate>Mon, 12 Feb 2018 14:25:15 +0000</pubDate>
</item>
<item>
	<title>Doug Hellmann: unittest — Automated Testing Framework — PyMOTW 3</title>
	<guid>http://feeds.doughellmann.com/~r/doughellmann/python/~3/4zcQANiZ5Bw/</guid>
	<link>http://feeds.doughellmann.com/~r/doughellmann/python/~3/4zcQANiZ5Bw/</link>
	<description>Python’s unittest module is based on the XUnit framework design by Kent Beck and Erich Gamma. The same pattern is repeated in many other languages, including C, Perl, Java, and Smalltalk. The framework implemented by unittest supports fixtures, test suites, and a test runner to enable automated testing. Read more&amp;#8230; This post is part of &amp;#8230; &lt;p class=&quot;link-more&quot;&gt;&lt;a href=&quot;https://doughellmann.com/blog/2018/02/12/unittest-automated-testing-framework-pymotw-3/&quot; class=&quot;more-link&quot;&gt;Continue reading&lt;span class=&quot;screen-reader-text&quot;&gt; &quot;unittest — Automated Testing Framework — PyMOTW 3&quot;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;div class=&quot;feedflare&quot;&gt;
&lt;a href=&quot;http://feeds.doughellmann.com/~ff/doughellmann/python?a=4zcQANiZ5Bw:kspetUeOmdU:yIl2AUoC8zA&quot;&gt;&lt;img src=&quot;http://feeds.feedburner.com/~ff/doughellmann/python?d=yIl2AUoC8zA&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.doughellmann.com/~ff/doughellmann/python?a=4zcQANiZ5Bw:kspetUeOmdU:7Q72WNTAKBA&quot;&gt;&lt;img src=&quot;http://feeds.feedburner.com/~ff/doughellmann/python?d=7Q72WNTAKBA&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.doughellmann.com/~ff/doughellmann/python?a=4zcQANiZ5Bw:kspetUeOmdU:V_sGLiPBpWU&quot;&gt;&lt;img src=&quot;http://feeds.feedburner.com/~ff/doughellmann/python?i=4zcQANiZ5Bw:kspetUeOmdU:V_sGLiPBpWU&quot; border=&quot;0&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;&lt;img src=&quot;http://feeds.feedburner.com/~r/doughellmann/python/~4/4zcQANiZ5Bw&quot; height=&quot;1&quot; width=&quot;1&quot; alt=&quot;&quot; /&gt;</description>
	<pubDate>Mon, 12 Feb 2018 14:00:16 +0000</pubDate>
</item>
<item>
	<title>Mike Driscoll: PyDev of the Week: Emily Morehouse-Valcarcel</title>
	<guid>http://www.blog.pythonlibrary.org/2018/02/12/pydev-of-the-week-emily-morehouse-valcarcel/</guid>
	<link>http://www.blog.pythonlibrary.org/2018/02/12/pydev-of-the-week-emily-morehouse-valcarcel/</link>
	<description>&lt;div class=&quot;pf-content&quot;&gt;&lt;p&gt;This week we welcome Emily Morehouse-Valcarcel (&lt;a href=&quot;https://twitter.com/emilyemorehouse&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;@emilyemorehouse&lt;/a&gt;) as our PyDev of the Week. Emily is the co-founder and Director of Engineering of &lt;a href=&quot;https://www.cuttlesoft.com/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Cuttlesoft&lt;/a&gt;. She recently spoke at &lt;a href=&quot;https://www.pycascades.com/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;PyCascades&lt;/a&gt; about Python&amp;#8217;s &lt;a href=&quot;https://www.pycascades.com/talks/the-ast-and-me/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;AST&lt;/a&gt;. You can get a feel for what projects she is interested in over on her &lt;a href=&quot;https://github.com/emilyemorehouse&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Github profile&lt;/a&gt;. Let&amp;#8217;s take a few moments to get to know her!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Can you tell us a little about yourself (hobbies, education, etc):&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I’m currently the Cofounder and Director of Engineering at a Cuttlesoft, a digital product development company. Before that, I studied Theatre, Criminology and Computer Science at the Florida State University. I didn’t actually discover programming until my junior year when I took an intro course and built an Enigma machine simulator. I fell in love! I really enjoy problem-solving and there’s always a new challenge to face and different things to learn or improve. I believe that if you ever get bored in the tech world, you’re doing it wrong. In my spare time, I enjoy playing video games, hiking with our dog (Colorado mountains are just incredible), photography, gardening, attending concerts, and indulging in Colorado’s  amazing craft beer and food scene. &lt;span id=&quot;more-7044&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Why did you start using Python?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The CS program I went through was very driven by theory and fundamentals, so we mainly used C and C++. I found that most of the side projects I wanted to work on were more web driven at the time, so I picked up Python alongside my now husband and business partner. There were just SO many things you could use Python for &amp;#8211; APIs, web apps, microcontrollers, web scraping &amp;#8211; we wanted to do it all. It was such a vast change from what I first learned and was so much quicker to build something with than something like C++. But I love that Python is built with C. It makes it all come full circle for me. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What other programming languages do you know and which is your favorite?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I’m fluent in a fair few. I’m actually a huge language nerd! C, C++, JavaScript, Elixir, Ruby, Swift, Objective-C, Java, Perl (in my pre-Python days), HTML/CSS. One of my favorite programming books is called Seven Languages in Seven Weeks; Bruce Tate does an excellent job of covering multiple different languages to illustrate how different programming paradigms work. I highly recommend it.  Python definitely tops them. It’s both incredibly elegant AND easy to use. You don’t find that often.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What projects are you working on now?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A fair few. One of the things I love about running an agency is that there are always a huge variety of things we work on. A few Python-driven web apps and APIs, some React clients for SPAs, and an Android app. We’re lucky to have a few long-term clients that we continue to iterate and add features to as well. We often work with non-profits or other tech companies, so it’s really rewarding to get to work on products that you’re interested in. Outside of work, I enjoy contributing to OSS projects (CPython and Axios are my two focuses currently). I also maintain a few plugins for Cordova/Ionic and enjoy playing around with different things like audio processing and image manipulation. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Which Python libraries are your favorite (core or 3rd party)?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is such a tough question. I’d have to pick Requests &amp;#8211; it’s one of the first libraries I used that I really appreciated the care taken to design its interface and to be a great example of what Pythonic code should look like. I also think that Turtle is an awesome core library to open up the language to other uses and focus on teaching programming to kids. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How did you become an entrepreneur? &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I stumbled into it! It was never my plan to run a business. I was in graduate school at the time while being recruited by a lot of huge tech companies, but I was also involved in a local co-working space/business incubator called Domi Station in Tallahassee, FL. Our first client found us before we’d even laid the groundwork of setting up contract boilerplates or a bank account! We had no idea how to run a business at the time, but our community was incredibly supportive and provided resources like a lawyer and accountant. Cuttlesoft would not exist today if it weren’t for Domi and their community. It can be stressful at times, but I’m really grateful to get to build a company that I have so much input in. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What advice do you have for someone who would like to found their own company?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Find your people to support you and find people you can learn from. Have a plan, but be willing to change it or throw it out and start over. It’s also incredibly important to have a co-founder or co-founders who share your vision but bring something unique to the table. I’m so lucky to have the relationship with my husband that empowers us to dovetail with each other incredibly well and run a company together. We help keep each other sane. And celebrate the small things! We had to remind ourselves that it was a huge accomplishment just to make it through our first year of running a business. Always make sure to give yourself credit.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Is there anything else you’d like to say?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I just have to say a HUGE thank you to the Python community. “Come for the language, stay for the community” could not be truer, and I believe there are amazing steps being taken to support diversity and welcoming all people. It shows in everything from the conferences to the documentation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Thanks for doing the interview!&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;&lt;p&gt;&lt;a class=&quot;a2a_button_facebook&quot; href=&quot;https://www.addtoany.com/add_to/facebook?linkurl=http%3A%2F%2Fwww.blog.pythonlibrary.org%2F2018%2F02%2F12%2Fpydev-of-the-week-emily-morehouse-valcarcel%2F&amp;linkname=PyDev%20of%20the%20Week%3A%20Emily%20Morehouse-Valcarcel&quot; title=&quot;Facebook&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;&lt;a class=&quot;a2a_button_twitter&quot; href=&quot;https://www.addtoany.com/add_to/twitter?linkurl=http%3A%2F%2Fwww.blog.pythonlibrary.org%2F2018%2F02%2F12%2Fpydev-of-the-week-emily-morehouse-valcarcel%2F&amp;linkname=PyDev%20of%20the%20Week%3A%20Emily%20Morehouse-Valcarcel&quot; title=&quot;Twitter&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;&lt;a class=&quot;a2a_button_google_plus&quot; href=&quot;https://www.addtoany.com/add_to/google_plus?linkurl=http%3A%2F%2Fwww.blog.pythonlibrary.org%2F2018%2F02%2F12%2Fpydev-of-the-week-emily-morehouse-valcarcel%2F&amp;linkname=PyDev%20of%20the%20Week%3A%20Emily%20Morehouse-Valcarcel&quot; title=&quot;Google+&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;&lt;a class=&quot;a2a_dd addtoany_share_save addtoany_share&quot; href=&quot;https://www.addtoany.com/share#url=http%3A%2F%2Fwww.blog.pythonlibrary.org%2F2018%2F02%2F12%2Fpydev-of-the-week-emily-morehouse-valcarcel%2F&amp;title=PyDev%20of%20the%20Week%3A%20Emily%20Morehouse-Valcarcel&quot;&gt;&lt;/a&gt;&lt;/p&gt;</description>
	<pubDate>Mon, 12 Feb 2018 13:30:38 +0000</pubDate>
</item>
<item>
	<title>Programiz: Python Shallow Copy and Deep Copy</title>
	<guid>https://www.programiz.com/python-programming/shallow-deep-copy</guid>
	<link>https://www.programiz.com/python-programming/shallow-deep-copy</link>
	<description>In this article, you’ll learn about python shallow copy, deep copy and the difference between them.</description>
	<pubDate>Mon, 12 Feb 2018 10:32:03 +0000</pubDate>
</item>
<item>
	<title>Matthew Rocklin: Dask Release 0.17.0</title>
	<guid>https://matthewrocklin.com/blog//work/2018/02/12/dask-0.17.0</guid>
	<link>https://matthewrocklin.com/blog//work/2018/02/12/dask-0.17.0</link>
	<description>&lt;p&gt;&lt;em&gt;This work is supported by &lt;a href=&quot;http://anaconda.com&quot;&gt;Anaconda Inc.&lt;/a&gt;
and the Data Driven Discovery Initiative from the &lt;a href=&quot;https://www.moore.org/&quot;&gt;Moore
Foundation&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I’m pleased to announce the release of Dask version 0.17.0.  This a significant
major release with new features, breaking changes, and stability improvements.
This blogpost outlines notable changes since the 0.16.0 release on November
21st.&lt;/p&gt;

&lt;p&gt;You can conda install Dask:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;conda install dask -c conda-forge
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;or pip install from PyPI:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip install dask[complete] --upgrade
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Full changelogs are available here:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dask/dask/blob/master/docs/source/changelog.rst&quot;&gt;dask/dask&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dask/distributed/blob/master/docs/source/changelog.rst&quot;&gt;dask/distributed&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some notable changes follow.&lt;/p&gt;

&lt;h3 id=&quot;deprecations&quot;&gt;Deprecations&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Removed &lt;code class=&quot;highlighter-rouge&quot;&gt;dask.dataframe.rolling_*&lt;/code&gt; methods, which were previously deprecated both in dask.dataframe and in pandas.  These are replaced with the &lt;code class=&quot;highlighter-rouge&quot;&gt;rolling.*&lt;/code&gt; namespace&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We’ve generally stopped maintenance of the &lt;code class=&quot;highlighter-rouge&quot;&gt;dask-ec2&lt;/code&gt; project to launch dask clusters on Amazon’s EC2 using Salt.  We generally recommend kubernetes instead both for Amazon’s EC2, and for Google and Azure as well&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://dask.pydata.org/en/latest/setup/kubernetes.html&quot;&gt;dask.pydata.org/en/latest/setup/kubernetes.html&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Internal state of the distributed scheduler has changed significantly.  This may affect advanced users who were inspecting this state for debugging or diagnostics.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;task-ordering&quot;&gt;Task Ordering&lt;/h3&gt;

&lt;p&gt;As Dask encounters more complex problems from more domains
we continually run into problems where its current heuristics do not perform optimally.
This release includes a rewrite of our static task prioritization heuristics.
This will improve Dask’s ability to traverse complex computations
in a way that keeps memory use low.&lt;/p&gt;

&lt;p&gt;To aid debugging we also integrated these heuristics into the GraphViz-style plots
that come from the visualize method.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;da&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;visualize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'order'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'RdBu'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://user-images.githubusercontent.com/306380/35012109-86df75fa-fad6-11e7-9fa8-a43a697a4a17.png&quot;&gt;
  &lt;img src=&quot;https://user-images.githubusercontent.com/306380/35012109-86df75fa-fad6-11e7-9fa8-a43a697a4a17.png&quot; width=&quot;80%&quot; align=&quot;center&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dask/dask/pull/3066&quot;&gt;dask/dask #3066&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dask/dask/pull/3057&quot;&gt;dask/dask #3057&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;nested-joblib&quot;&gt;Nested Joblib&lt;/h3&gt;

&lt;p&gt;Dask supports parallelizing Scikit-Learn
by extending Scikit-Learn’s underlying library for parallelism,
&lt;a href=&quot;http://tomaugspurger.github.io/distributed-joblib.html&quot;&gt;Joblib&lt;/a&gt;.
This allows Dask to distribute &lt;em&gt;some&lt;/em&gt; SKLearn algorithms across a cluster
just by wrapping them with a context manager.&lt;/p&gt;

&lt;p&gt;This relationship has been strengthened,
and particular attention has been focused
when nesting one parallel computation within another,
such as occurs when you train a parallel estimator, like &lt;code class=&quot;highlighter-rouge&quot;&gt;RandomForest&lt;/code&gt;,
within another parallel computation, like &lt;code class=&quot;highlighter-rouge&quot;&gt;GridSearchCV&lt;/code&gt;.
Previously this would result in spawning too many threads/processes
and generally oversubscribing hardware.&lt;/p&gt;

&lt;p&gt;Due to recent combined development within both Joblib and Dask,
these sorts of situations can now be resolved efficiently by handing them off to Dask,
providing speedups even in single-machine cases:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sklearn.externals&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;joblib&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;distributed.joblib&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# register the dask joblib backend&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;dask.distributed&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Client&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;est&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ParallelEstimator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GridSearchCV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;est&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;joblib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parallel_backend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'dask'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;gs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;See Tom Augspurger’s recent post with more details about this work:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://tomaugspurger.github.io/distributed-joblib.html&quot;&gt;http://tomaugspurger.github.io/distributed-joblib.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/joblib/joblib/pull/595&quot;&gt;joblib/joblib #595&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dask/distributed/pull/1705&quot;&gt;dask/distributed #1705&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/joblib/joblib/pull/613&quot;&gt;joblib/joblib #613&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks to &lt;a href=&quot;https://github.com/TomAugspurger&quot;&gt;Tom Augspurger&lt;/a&gt;,
&lt;a href=&quot;https://github.com/jcrist&quot;&gt;Jim Crist&lt;/a&gt;, and
&lt;a href=&quot;https://github.com/ogrisel&quot;&gt;Olivier Grisel&lt;/a&gt; who did most of this work.&lt;/p&gt;

&lt;h3 id=&quot;scheduler-internal-refactor&quot;&gt;Scheduler Internal Refactor&lt;/h3&gt;

&lt;p&gt;The distributed scheduler has been significantly refactored to change it from a forest of dictionaries:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;priority&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'b'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'c'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'b'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'b'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'c'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'c'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;nbytes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'b'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'c'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;28&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To a bunch of objects:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;tasks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;priority&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nbytes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
         &lt;span class=&quot;s&quot;&gt;'b'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'b'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;priority&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nbytes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
         &lt;span class=&quot;s&quot;&gt;'c'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'c'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;priority&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nbytes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;28&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(there is &lt;em&gt;much&lt;/em&gt; more state than what is listed above,
but hopefully the examples above are clear.)&lt;/p&gt;

&lt;p&gt;There were a few motivations for this:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;We wanted to try out Cython and PyPy, for which objects like this might be more effective than dictionaries.&lt;/li&gt;
  &lt;li&gt;We believe that this is probably a bit easier for developers new to the schedulers to understand.  The proliferation of state dictionaries was not highly discoverable.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Goal one ended up not working out.
We have not yet been able to make the scheduler significantly faster under Cython or PyPy with this new layout.  There is even a slight memory increase with these changes.
However we have been happy with the results in code readability, and we hope that others find this useful as well.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href=&quot;https://github.com/pitrou&quot;&gt;Antoine Pitrou&lt;/a&gt;,
who did most of the work here.&lt;/p&gt;

&lt;h3 id=&quot;user-priorities&quot;&gt;User Priorities&lt;/h3&gt;

&lt;p&gt;You can now submit tasks with different priorities.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;submit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;priority&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;# Higher priority preferred&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;submit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;priority&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# Lower priority happens later&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To be clear, Dask has always had priorities, they just weren’t easily user-settable.
Higher priorities are given precedence.  The default priority for all tasks is zero.
You can also submit priorities for collections (like arrays and dataframes)&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;persist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;priority&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# give this computation higher priority.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dask/distributed/pull/1651&quot;&gt;dask/distributed #1651&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;related-projects&quot;&gt;Related projects&lt;/h2&gt;

&lt;p&gt;Several related projects are also undergoing releases:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Tornado is updating to version 5.0 (there is a beta out now).
This is a major change that will put Tornado on the Asyncio event loop in Python 3.
It also includes many performance enhancements for high-bandwidth networks.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Bokeh 0.12.14 was just released.&lt;/p&gt;

    &lt;p&gt;Note that you will need to update Dask to work with this version of Bokeh&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://daskernetes.readthedocs.io/en/latest/&quot;&gt;Daskernetes&lt;/a&gt;, a new project for launching Dask on Kubernetes clusters&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;acknowledgements&quot;&gt;Acknowledgements&lt;/h2&gt;

&lt;p&gt;The following people contributed to the dask/dask repository since the 0.16.0
release on November 14th:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Albert DeFusco&lt;/li&gt;
  &lt;li&gt;Apostolos Vlachopoulos&lt;/li&gt;
  &lt;li&gt;castalheiro&lt;/li&gt;
  &lt;li&gt;James Bourbeau&lt;/li&gt;
  &lt;li&gt;Jon Mease&lt;/li&gt;
  &lt;li&gt;Ian Hopkinson&lt;/li&gt;
  &lt;li&gt;Jakub Nowacki&lt;/li&gt;
  &lt;li&gt;Jim Crist&lt;/li&gt;
  &lt;li&gt;John A Kirkham&lt;/li&gt;
  &lt;li&gt;Joseph Lin&lt;/li&gt;
  &lt;li&gt;Keisuke Fujii&lt;/li&gt;
  &lt;li&gt;Martijn Arts&lt;/li&gt;
  &lt;li&gt;Martin Durant&lt;/li&gt;
  &lt;li&gt;Matthew Rocklin&lt;/li&gt;
  &lt;li&gt;Markus Gonser&lt;/li&gt;
  &lt;li&gt;Nir&lt;/li&gt;
  &lt;li&gt;Rich Signell&lt;/li&gt;
  &lt;li&gt;Roman Yurchak&lt;/li&gt;
  &lt;li&gt;S. Andrew Sheppard&lt;/li&gt;
  &lt;li&gt;sephib&lt;/li&gt;
  &lt;li&gt;Stephan Hoyer&lt;/li&gt;
  &lt;li&gt;Tom Augspurger&lt;/li&gt;
  &lt;li&gt;Uwe L. Korn&lt;/li&gt;
  &lt;li&gt;Wei Ji&lt;/li&gt;
  &lt;li&gt;Xander Johnson&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following people contributed to the dask/distributed repository since the
1.20.0 release on November 14th:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Alexander Ford&lt;/li&gt;
  &lt;li&gt;Antoine Pitrou&lt;/li&gt;
  &lt;li&gt;Brett Naul&lt;/li&gt;
  &lt;li&gt;Brian Broll&lt;/li&gt;
  &lt;li&gt;Bruce Merry&lt;/li&gt;
  &lt;li&gt;Cornelius Riemenschneider&lt;/li&gt;
  &lt;li&gt;Daniel Li&lt;/li&gt;
  &lt;li&gt;Jim Crist&lt;/li&gt;
  &lt;li&gt;Kelvin Yang&lt;/li&gt;
  &lt;li&gt;Matthew Rocklin&lt;/li&gt;
  &lt;li&gt;Min RK&lt;/li&gt;
  &lt;li&gt;rqx&lt;/li&gt;
  &lt;li&gt;Russ Bubley&lt;/li&gt;
  &lt;li&gt;Scott Sievert&lt;/li&gt;
  &lt;li&gt;Tom Augspurger&lt;/li&gt;
  &lt;li&gt;Xander Johnson&lt;/li&gt;
&lt;/ul&gt;</description>
	<pubDate>Mon, 12 Feb 2018 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Sandipan Dey: Interactive Image Segmentation with Graph-Cut in Python</title>
	<guid></guid>
	<link></link>
	<description>In this article, interactive image segmentation with graph-cut is going to be discussed. and it will be used to segment the source object from the background in an image. This segmentation technique was proposed by Boycov and Jolli in this paper. This problem appeared as a homework assignment here., and also in this lecture video &amp;#8230; &lt;a href=&quot;https://sandipanweb.wordpress.com/2018/02/11/interactive-image-segmentation-with-graph-cut/&quot; class=&quot;more-link&quot;&gt;Continue reading &lt;span class=&quot;screen-reader-text&quot;&gt;Interactive Image Segmentation with Graph-Cut in&amp;#160;Python&lt;/span&gt;&lt;/a&gt;</description>
	<pubDate>Sun, 11 Feb 2018 00:45:57 +0000</pubDate>
</item>
<item>
	<title>Simple is Better Than Complex: Django Tips #22 Designing Better Models</title>
	<guid>https://simpleisbetterthancomplex.com/tips/2018/02/10/django-tip-22-designing-better-models.html</guid>
	<link>https://simpleisbetterthancomplex.com/tips/2018/02/10/django-tip-22-designing-better-models.html</link>
	<description>&lt;p&gt;In this post, I will share some tips to help you improve the design of your Django Models. Many of those tips are
related to naming conventions, which can improve a lot the readability of your code.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://www.python.org/dev/peps/pep-0008/&quot; target=&quot;_blank&quot;&gt;PEP8&lt;/a&gt; is widely used in the Python ecosystem
(Django included). So it’s a good idea to use it in your own projects.&lt;/p&gt;

&lt;p&gt;Besides PEP8, I like to follow &lt;a href=&quot;https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/coding-style/&quot; target=&quot;_blank&quot;&gt;Django’s Coding Style&lt;/a&gt;
which is a guideline for people writing code for inclusion in the Django code base itself.&lt;/p&gt;

&lt;p&gt;Below, an overview of the items we are going to explore:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://simpleisbetterthancomplex.com/feed.xml#naming-your-models&quot;&gt;Naming Your Models&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://simpleisbetterthancomplex.com/feed.xml#model-style-ordering&quot;&gt;Model Style Ordering&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://simpleisbetterthancomplex.com/feed.xml#reverse-relationships&quot;&gt;Reverse Relationships&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://simpleisbetterthancomplex.com/feed.xml#blank-and-null-fields&quot;&gt;Blank and Null Fields&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;naming-your-models&quot;&gt;Naming Your Models&lt;/h4&gt;

&lt;p&gt;The model definition is a class, so always use &lt;strong&gt;CapWords&lt;/strong&gt; convention (no underscores). E.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Permission&lt;/code&gt;,
&lt;code class=&quot;highlighter-rouge&quot;&gt;ContentType&lt;/code&gt;, etc.&lt;/p&gt;

&lt;p&gt;For the model’s attributes use &lt;strong&gt;snake_case&lt;/strong&gt;. E.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;first_name&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;last_name&lt;/code&gt;, etc.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.db&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Company&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CharField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;vat_identification_number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CharField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Always name your models using &lt;strong&gt;singular&lt;/strong&gt;. Call it &lt;code class=&quot;highlighter-rouge&quot;&gt;Company&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;Companies&lt;/code&gt;. A model definition is the
representation of a single object (the object in this example is a &lt;strong&gt;company&lt;/strong&gt;), and not a collection of companies.&lt;/p&gt;

&lt;p&gt;This usually cause confusion because we tend to think in terms of the database tables. A model will eventually be
translated into a table. The table is correct to be named using its plural form because the table represents a
collection of objects.&lt;/p&gt;

&lt;p&gt;In a Django model, we can access this collection via &lt;code class=&quot;highlighter-rouge&quot;&gt;Company.objects&lt;/code&gt;. We can renamed the &lt;code class=&quot;highlighter-rouge&quot;&gt;objects&lt;/code&gt; attribute by
defining a &lt;code class=&quot;highlighter-rouge&quot;&gt;models.Manager&lt;/code&gt; attribute:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.db&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Company&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# ...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;companies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Manager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So with that we would access the collection of companies as &lt;code class=&quot;highlighter-rouge&quot;&gt;Company.companies.filter(name='Google')&lt;/code&gt;. But I usually
don’t go there. I prefer keeping the &lt;code class=&quot;highlighter-rouge&quot;&gt;objects&lt;/code&gt; attribute there for consistency.&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;model-style-ordering&quot;&gt;Model Style Ordering&lt;/h4&gt;

&lt;p&gt;The Django Coding Style suggests the following order of inner classes, methods and attributes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If &lt;strong&gt;choices&lt;/strong&gt; is defined for a given model field, define each choice as a tuple of tuples, with an all-uppercase name as a class attribute on the model.&lt;/li&gt;
  &lt;li&gt;All database fields&lt;/li&gt;
  &lt;li&gt;Custom manager attributes&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;class Meta&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;def __str__()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;def save()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;def get_absolute_url()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Any custom methods&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.db&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.urls&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Company&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# CHOICES&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;PUBLIC_LIMITED_COMPANY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'PLC'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;PRIVATE_COMPANY_LIMITED&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'LTD'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;LIMITED_LIABILITY_PARTNERSHIP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'LLP'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;COMPANY_TYPE_CHOICES&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PUBLIC_LIMITED_COMPANY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Public limited company'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PRIVATE_COMPANY_LIMITED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Private company limited by shares'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LIMITED_LIABILITY_PARTNERSHIP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Limited liability partnership'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# DATABASE FIELDS&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CharField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;vat_identification_number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CharField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'VAT'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;company_type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CharField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'type'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;choices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;COMPANY_TYPE_CHOICES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# MANAGERS&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Manager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;limited_companies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LimitedCompanyManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# META CLASS&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Meta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;verbose_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'company'&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;verbose_name_plural&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'companies'&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# TO STRING METHOD&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__str__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# SAVE METHOD&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;do_something&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# Call the &quot;real&quot; save() method.&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;do_something_else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# ABSOLUTE URL METHOD&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_absolute_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'company_details'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'pk'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# OTHER METHODS&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;process_invoices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;do_something&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;reverse-relationships&quot;&gt;Reverse Relationships&lt;/h4&gt;

&lt;h5 id=&quot;relatedname&quot;&gt;related_name&lt;/h5&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;related_name&lt;/code&gt; attribute in the &lt;code class=&quot;highlighter-rouge&quot;&gt;ForeignKey&lt;/code&gt; fields is extremely useful. It let’s us define a meaningful name
for the reverse relationship.&lt;/p&gt;

&lt;p&gt;Rule of thumb: &lt;strong&gt;if you are not sure what would be the &lt;code class=&quot;highlighter-rouge&quot;&gt;related_name&lt;/code&gt;, use the plural of the model holding the &lt;code class=&quot;highlighter-rouge&quot;&gt;ForeignKey&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Company&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CharField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;first_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CharField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;last_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CharField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;company&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ForeignKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Company&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on_delete&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CASCADE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;related_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'employees'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That means the &lt;code class=&quot;highlighter-rouge&quot;&gt;Company&lt;/code&gt; model will have a special attribute named &lt;code class=&quot;highlighter-rouge&quot;&gt;employees&lt;/code&gt;, which will return a &lt;code class=&quot;highlighter-rouge&quot;&gt;QuerySet&lt;/code&gt; with
all employees instances related to the company.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;n&quot;&gt;google&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Company&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Google'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;employees&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also use the reverse relationship to modify the &lt;code class=&quot;highlighter-rouge&quot;&gt;company&lt;/code&gt; field on the &lt;code class=&quot;highlighter-rouge&quot;&gt;Employee&lt;/code&gt; instances:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;n&quot;&gt;vitor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Vitor'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;google&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Company&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Google'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;employees&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vitor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&quot;relatedqueryname&quot;&gt;related_query_name&lt;/h5&gt;

&lt;p&gt;This kind of relationship also applies to query filters. For example, if I wanted to list all companies that employs
people named ‘Vitor’, I could do the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;n&quot;&gt;companies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Company&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;employee__first_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Vitor'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want to customize the name of this relationship, here is how we do it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;first_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CharField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;last_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CharField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;company&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ForeignKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Company&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;on_delete&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CASCADE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;related_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'employees'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;related_query_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'person'&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then the usage would be:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;n&quot;&gt;companies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Company&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;person__first_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Vitor'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To use it consistently, &lt;code class=&quot;highlighter-rouge&quot;&gt;related_name&lt;/code&gt; goes as &lt;strong&gt;plural&lt;/strong&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;related_query_name&lt;/code&gt; goes as &lt;strong&gt;singular&lt;/strong&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;blank-and-null-fields&quot;&gt;Blank and Null Fields&lt;/h4&gt;

&lt;p&gt;I’ve written about the &lt;a href=&quot;https://simpleisbetterthancomplex.com/tips/2016/07/25/django-tip-8-blank-or-null.html&quot;&gt;differences between Blank and Null fields&lt;/a&gt; in
another post, but I will try to summarize it here:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Null&lt;/strong&gt;: It is database-related. Defines if a given database column will accept null values or not.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Blank&lt;/strong&gt;: It is validation-related. It will be used during forms validation, when calling &lt;code class=&quot;highlighter-rouge&quot;&gt;form.is_valid()&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Do not use &lt;code class=&quot;highlighter-rouge&quot;&gt;null=True&lt;/code&gt; for text-based fields that are optional. Otherwise, you will end up having two possible values
for “no data,” that is: &lt;strong&gt;None&lt;/strong&gt; and an &lt;strong&gt;empty string&lt;/strong&gt;. Having two possible values for “no data” is redundant. The
Django convention is to use the empty string, not NULL.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;c&quot;&gt;# The default values of `null` and `blank` are `False`.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CharField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# Mandatory&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;bio&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TextField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blank&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# Optional (don't put null=True)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;birth_date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DateField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blank&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# Optional (here you may add null=True)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;further-reading&quot;&gt;Further Reading&lt;/h4&gt;

&lt;p&gt;Models definition is one of the most important parts of your application. Something that makes all the difference is
defining the field types properly. Make sure to review the &lt;a href=&quot;https://docs.djangoproject.com/en/2.0/ref/models/fields/#model-field-types&quot; target=&quot;_blank&quot;&gt;Django models field types&lt;/a&gt;
to know your options. You can also define custom field types.&lt;/p&gt;

&lt;p&gt;If you are interested in code conventions, I suggest having a look on &lt;a href=&quot;https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/coding-style/&quot; target=&quot;_blank&quot;&gt;Django’s Coding Style&lt;/a&gt;.
I’ve also published an tutorial about the &lt;a href=&quot;https://simpleisbetterthancomplex.com/packages/2016/08/05/flake8.html&quot;&gt;flake8 library&lt;/a&gt; which helps you check for PEP8 issues in your code.&lt;/p&gt;

&lt;p&gt;That’s it for today! You can also &lt;a href=&quot;http://eepurl.com/b0gR51&quot; target=&quot;_blank&quot;&gt;subscribe to my newsletter&lt;/a&gt; to receive
updates from the blog.&lt;/p&gt;</description>
	<pubDate>Sat, 10 Feb 2018 21:38:00 +0000</pubDate>
</item>
<item>
	<title>Weekly Python StackOverflow Report: (cxii) stackoverflow python report</title>
	<guid>http://python-weekly.blogspot.com/2018/02/cxii-stackoverflow-python-report.html</guid>
	<link>http://python-weekly.blogspot.com/2018/02/cxii-stackoverflow-python-report.html</link>
	<description>These are the ten most rated questions at &lt;a href=&quot;http://www.stackoverflow.com/&quot;&gt;Stack Overflow&lt;/a&gt; last week.&lt;br /&gt;Between brackets: [&lt;b&gt;question score&lt;/b&gt; / answers count]&lt;br /&gt;Build date: 2018-02-10 21:28:49 GMT&lt;br /&gt;&lt;hr /&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/48616694&quot; target=&quot;_blank&quot;&gt;Remove combinations that contains some values before even calculated&lt;/a&gt; - [&lt;b&gt;16&lt;/b&gt;/7]&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/48661907&quot; target=&quot;_blank&quot;&gt;Use variable to indicate index range&lt;/a&gt; - [&lt;b&gt;14&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/48611441&quot; target=&quot;_blank&quot;&gt;Python: pass &quot;not&quot; as a lambda function&lt;/a&gt; - [&lt;b&gt;13&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/48658952&quot; target=&quot;_blank&quot;&gt;How to generate sequence considering NaN in pandas&lt;/a&gt; - [&lt;b&gt;9&lt;/b&gt;/4]&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/48633951&quot; target=&quot;_blank&quot;&gt;Why does chained assignment work this way?&lt;/a&gt; - [&lt;b&gt;9&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/48626676&quot; target=&quot;_blank&quot;&gt;VS Code shows an error message at print statement in python 2.7&lt;/a&gt; - [&lt;b&gt;8&lt;/b&gt;/3]&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/48700710&quot; target=&quot;_blank&quot;&gt;Python - Flatten the list of dictionaries&lt;/a&gt; - [&lt;b&gt;8&lt;/b&gt;/3]&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/48707089&quot; target=&quot;_blank&quot;&gt;fractions.Fraction() returns different nom., denom. pair when parsing a float or its string representation&lt;/a&gt; - [&lt;b&gt;8&lt;/b&gt;/3]&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/48623544&quot; target=&quot;_blank&quot;&gt;executing two class methods at the same time in Python&lt;/a&gt; - [&lt;b&gt;8&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/48622281&quot; target=&quot;_blank&quot;&gt;How to save numpy ndarray as .csv file?&lt;/a&gt; - [&lt;b&gt;8&lt;/b&gt;/1]&lt;/li&gt;&lt;/ol&gt;</description>
	<pubDate>Sat, 10 Feb 2018 21:29:00 +0000</pubDate>
</item>
<item>
	<title>Artem Golubin: How Numba and Cython speed up Python code</title>
	<guid>http://rushter.com/blog/numba-cython-python-optimization/</guid>
	<link>http://rushter.com/blog/numba-cython-python-optimization/</link>
	<description>&lt;p&gt;Over the past years, Numba and Cython have gained a lot of attention in the data science community. They both provide a way to speed up CPU intensive tasks, but in different ways. This article describes architectural differences between them.&lt;/p&gt;
&lt;h1&gt;Numba&lt;/h1&gt;
&lt;p&gt;Numba is a just-in-time (JIT) compiler that translates Python code to native machine instructions both for CPU and GPU. The code can be compiled at import time, runtime, or ahead of time.&lt;/p&gt;
&lt;p&gt;It's extremely easy to start using Numba, by simply putting a &lt;code&gt;jit&lt;/code&gt; decorator:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numpy&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;np&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numba&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jit&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;/pre&gt;&lt;/div&gt;</description>
	<pubDate>Sat, 10 Feb 2018 14:38:16 +0000</pubDate>
</item>

</channel>
</rss>
